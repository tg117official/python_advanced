#What is Pytest?
- Pytest is a Python testing framework used to write and run tests for your code.
- Itâ€™s designed to make testing simple, flexible, and powerful.

Think of Pytest as a tool that helps you check if your code is doing what itâ€™s supposed to do.



Why Use Pytest Instead of Unittest?
- More Features:
  - Pytest offers a lot of features like parameterized tests, fixtures, and plugins.
- Less Boilerplate:
  - You donâ€™t need to write long test classes or methods. A simple function works as a test.
- Better Debugging:
  - Pytest provides detailed error reports to help you quickly find problems.



Basic Pytest Example

Letâ€™s test a simple `add` function.

#Code to Test:

def add(a, b):
    return a + b


#Test Using Pytest:

# test_math.py
def test_add():
    assert add(2, 3) == 5  # Check if 2 + 3 equals 5
    assert add(-1, 1) == 0  # Check if -1 + 1 equals 0


#Run the Test:
bash
pytest test_math.py


#Output:
plaintext
==================== test session starts ====================
collected 1 item

test_math.py .                                         [100%]

==================== 1 passed in 0.01 seconds ====================




Purpose of Pytest
1. Validate Your Code:
   - Check if your functions, classes, or APIs work as expected.
2. Automate Testing:
   - Run hundreds of tests automatically with a single command.
3. Ensure Code Quality:
   - Prevent bugs from being introduced when you update your code.



Key Features of Pytest

#1. Simple Assertions
- Use the `assert` keyword to check if something is true.

def test_subtract():
    assert subtract(5, 3) == 2
    assert subtract(5, 5) == 0




#2. Parameterized Tests
- Test multiple inputs and outputs without duplicating code.

import pytest

@pytest.mark.parametrize("a, b, expected", [
    (2, 3, 5),
    (-1, 1, 0),
    (0, 0, 0)
])
def test_add(a, b, expected):
    assert add(a, b) == expected




#3. Fixtures
- Set up reusable test data or resources before running tests.

import pytest

@pytest.fixture
def sample_data():
    return [1, 2, 3, 4]

def test_sum(sample_data):
    assert sum(sample_data) == 10




#4. Detailed Error Reports
- Pytest provides easy-to-read error messages when a test fails.

def test_divide():
    assert divide(10, 2) == 6  # Wrong expected value


Output:
plaintext
E       assert 5 == 6
E        +  where 5 = divide(10, 2)




#5. Plugins
- Extend Pytestâ€™s functionality with plugins like:
  - `pytest-django`: For testing Django applications.
  - `pytest-html`: Generate HTML reports.
  - `pytest-mock`: For mocking functions or objects.



Industry-Level Use Cases

#1. Testing APIs
- Ensure that API endpoints return correct responses.

import requests

def test_api():
    response = requests.get("https://api.example.com/data")
    assert response.status_code == 200
    assert "key" in response.json()




#2. Testing Web Applications
- Validate forms, database queries, and page navigation.
- Use Pytest-Django for Django apps.

@pytest.mark.django_db
def test_user_creation():
    user = User.objects.create(username="testuser")
    assert User.objects.count() == 1




#3. Testing Data Pipelines
- Ensure transformations and aggregations work correctly.

@pytest.fixture
def sample_dataset():
    return [10, 20, 30]

def test_average(sample_dataset):
    assert calculate_average(sample_dataset) == 20




#4. Testing Machine Learning Models
- Validate that the model gives the expected predictions.

@pytest.fixture
def model():
    return train_model()

def test_model_predictions(model):
    predictions = model.predict([[1, 2], [3, 4]])
    assert predictions == [0, 1]




#5. Testing File Processing
- Check if your program reads, writes, or transforms files correctly.

import os

def test_file_creation(tmp_path):
    file_path = tmp_path / "test.txt"
    with open(file_path, "w") as f:
        f.write("Hello, World!")

    assert os.path.exists(file_path)




Advantages of Pytest

1. Easy to Learn:
   - Simple syntax for writing tests.
2. Fast Execution:
   - Runs tests quickly, even for large projects.
3. Highly Flexible:
   - Use plugins, fixtures, and parameterization to handle complex test cases.
4. Scalable:
   - Suitable for small projects and large applications alike.



Limitations of Pytest

1. Requires Setup:
   - New users may need time to understand advanced features like fixtures or plugins.
2. Not Ideal for GUI Testing:
   - Pytest focuses on backend testing. Use tools like Selenium for GUI tests.



Best Practices for Pytest

1. Organize Test Files:
   - Store tests in a `tests` directory.
   - Name test files like `test_*.py`.

2. Write Clear Test Names:
   - Use descriptive function names like `test_user_login`.

3. Use Fixtures for Reusability:
   - Avoid duplicating test setup code.

4. Run Tests Regularly:
   - Integrate Pytest into your CI/CD pipeline to run tests automatically.



When to Use Pytest
- Small Projects: Quickly test utility functions or scripts.
- Web Applications: Validate APIs, database queries, and user interactions.
- Data Pipelines: Ensure data transformations work as expected.
- Machine Learning: Test preprocessing, training, and prediction functions.



Summary
- Pytest is a flexible and powerful framework for writing and running tests in Python.
- It simplifies testing with features like assertions, parameterization, and fixtures.
- Common use cases include testing APIs, web apps, data pipelines, and ML models.

Let me know if you need more examples or practice exercises! ðŸ˜Š