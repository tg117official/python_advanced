Iterators in Python

#What is an Iterator?
- An iterator in Python is an object that lets you loop through (iterate) items in a collection, like a list, tuple, or dictionary.
- It remembers where it left off so you can get the next item in the sequence.
- An iterator has two key methods:
  - `__iter__()`: Returns the iterator object itself.
  - `__next__()`: Returns the next item in the sequence or raises `StopIteration` when there are no more items.



How Does an Iterator Work?

# Example of using an iterator
numbers = [1, 2, 3]
iterator = iter(numbers)  # Get an iterator from the list

print(next(iterator))  # Output: 1
print(next(iterator))  # Output: 2
print(next(iterator))  # Output: 3


- `iter(numbers)` creates an iterator object.
- `next(iterator)` retrieves one item at a time.



Purpose of Iterators
- Efficient Iteration: Process items in a collection one by one without creating additional lists
  or data structures.
- Streamline Loops: Iterators make it easy to loop through collections with minimal code.



Custom Iterators

# What is a Custom Iterator?
A custom iterator is a class you define to create your own sequence-like behavior.

# How to Create a Custom Iterator?
1. Define a class with:
   - `__iter__()`: Initialize the iterator and return itself.
   - `__next__()`: Define what happens when the next item is requested.



Example: Custom Iterator

class Counter:
    def __init__(self, start, end):
        self.current = start
        self.end = end

    def __iter__(self):
        return self  # The object itself is the iterator

    def __next__(self):
        if self.current > self.end:
            raise StopIteration  # Stop the iteration when finished
        value = self.current
        self.current += 1
        return value

# Using the custom iterator
counter = Counter(1, 5)
for num in counter:
    print(num)
# Output: 1 2 3 4 5




Why Use Custom Iterators?
- To create sequences that don’t exist in memory (e.g., infinite sequences or derived data).
- To model custom behaviors like pagination, random sampling, or dynamic data.



Key Features of Iterators
1. Lazy Evaluation:
   - Items are generated one at a time, which saves memory.
2. State Retention:
   - Iterators remember where they stopped.



Industry-Level Use Cases

# 1. Processing Large Datasets
- Use iterators to read and process large files without loading the entire file into memory.

def read_file(file_path):
    with open(file_path, 'r') as file:
        for line in file:
            yield line.strip()

for line in read_file("large_file.txt"):
    print(line)




# 2. Generating Infinite Sequences
- Create sequences that don’t end, like IDs, timestamps, or random numbers.

class InfiniteCounter:
    def __init__(self):
        self.current = 0

    def __iter__(self):
        return self

    def __next__(self):
        self.current += 1
        return self.current

counter = InfiniteCounter()
for _ in range(5):
    print(next(counter))  # Output: 1 2 3 4 5




# 3. Data Streams
- Process data from APIs or sensors in real-time.

def data_stream():
    for i in range(1, 4):
        yield f"Data {i}"

stream = data_stream()
for data in stream:
    print(data)
# Output:
# Data 1
# Data 2
# Data 3




# 4. Pagination in Web Applications
- Iterate through database results or API responses page by page.

class Paginator:
    def __init__(self, items, page_size):
        self.items = items
        self.page_size = page_size
        self.current_page = 0

    def __iter__(self):
        return self

    def __next__(self):
        start = self.current_page * self.page_size
        end = start + self.page_size
        if start >= len(self.items):
            raise StopIteration
        self.current_page += 1
        return self.items[start:end]

items = list(range(1, 21))
paginator = Paginator(items, 5)
for page in paginator:
    print(page)
# Output:
# [1, 2, 3, 4, 5]
# [6, 7, 8, 9, 10]
# [11, 12, 13, 14, 15]
# [16, 17, 18, 19, 20]


#  5. Simulating Real-Time Data
- Iterate over simulated or incoming sensor data.

import random

class TemperatureSensor:
    def __iter__(self):
        return self

    def __next__(self):
        return random.uniform(20.0, 25.0)  # Simulating a temperature range

sensor = TemperatureSensor()
for _ in range(5):
    print(next(sensor))
# Output: Random temperature readings




Advantages of Iterators
1. Memory Efficiency:
   - Only one item is in memory at a time.
2. Customizable Behavior:
   - Create complex or infinite sequences.
3. Stream Processing:
   - Perfect for real-time or large-scale data.



Disadvantages
1. One-Time Use:
   - Once an iterator is exhausted, it cannot be reused.
2. Harder Debugging:
   - Debugging stateful custom iterators can be challenging.



When to Use Iterators
- When working with large datasets or streams.
- When generating custom sequences.
- For pagination or chunked data processing.



Summary
- Iterators let you process collections one item at a time, saving memory.
- Custom iterators allow you to define sequences with specific behavior.
- They are widely used in data streaming, large-scale processing, and dynamic data generation.
