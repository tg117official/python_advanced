Decorators in Python

# What is a Decorator?
A decorator is a function that modifies another function or method.
It adds extra functionality to the original function without changing its structure.

Think of a decorator as a wrapper around a function that enhances or alters its behavior.


How Does a Decorator Work?
- A decorator takes a function as input.
- It adds some code before or after the original function.
- It returns the modified function.

#Basic Syntax of a Decorator:

def decorator_function(original_function):
    def wrapper_function():
        # Code before the original function
        original_function()
        # Code after the original function
    return wrapper_function


You apply a decorator using the `@decorator_name` syntax.



Basic Example

def simple_decorator(func):
    def wrapper():
        print("Before the function call")
        func()
        print("After the function call")
    return wrapper

@simple_decorator
def say_hello():
    print("Hello!")

say_hello()
# Output:
# Before the function call
# Hello!
# After the function call


Here:
1. The `simple_decorator` adds extra behavior before and after `say_hello`.
2. The `@simple_decorator` applies the decorator to `say_hello`.



Why Use Decorators?
- To reuse common functionality across multiple functions (e.g., logging, authentication).
- To keep your code clean and modular by separating core logic from additional behavior.



Industry-Level Use Cases

#1. Logging
Automatically log details about function calls.

def log_decorator(func):
    def wrapper(*args, kwargs):
        print(f"Calling {func.__name__} with arguments {args} {kwargs}")
        result = func(*args, kwargs)
        print(f"{func.__name__} returned {result}")
        return result
    return wrapper

@log_decorator
def add(a, b):
    return a + b

add(5, 3)
# Output:
# Calling add with arguments (5, 3) {}
# add returned 8




#2. Authentication
Ensure users are authorized to access certain parts of an application.

def authenticate_decorator(func):
    def wrapper(user):
        if user == "admin":
            return func(user)
        else:
            return "Access Denied"
    return wrapper

@authenticate_decorator
def access_dashboard(user):
    return f"Welcome {user} to the dashboard!"

print(access_dashboard("admin"))  # Output: Welcome admin to the dashboard!
print(access_dashboard("guest"))  # Output: Access Denied




#3. Performance Measurement
Measure how long a function takes to execute.

import time

def timer_decorator(func):
    def wrapper(*args, kwargs):
        start_time = time.time()
        result = func(*args, kwargs)
        end_time = time.time()
        print(f"{func.__name__} executed in {end_time - start_time:.2f} seconds")
        return result
    return wrapper

@timer_decorator
def compute():
    time.sleep(2)
    print("Computing something...")

compute()
# Output:
# Computing something...
# compute executed in 2.00 seconds




#4. Input Validation
Check if inputs to a function are valid.

def validate_decorator(func):
    def wrapper(*args):
        if any(arg < 0 for arg in args):
            return "Invalid input: negative numbers not allowed"
        return func(*args)
    return wrapper

@validate_decorator
def multiply(a, b):
    return a * b

print(multiply(2, 3))   # Output: 6
print(multiply(-1, 3))  # Output: Invalid input: negative numbers not allowed




#5. Web Development (Flask/Django Frameworks)
Decorators are heavily used for routing and middleware.

from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Welcome to the homepage!"

# The @app.route decorator associates the function with a URL path.




How Decorators Improve Code
1. Reusable: Write a feature (like logging) once and use it across multiple functions.
2. Readable: Keep core logic separate from additional functionality.
3. Dynamic: Easily add or remove functionality without changing the original function.



Advanced Concepts
- Chaining Decorators: Apply multiple decorators to a single function.

@log_decorator
@timer_decorator
def greet():
    print("Hello!")

greet()


- Decorators with Arguments: Create customizable decorators.

def repeat_decorator(times):
    def decorator(func):
        def wrapper(*args, kwargs):
            for _ in range(times):
                func(*args, kwargs)
        return wrapper
    return decorator

@repeat_decorator(times=3)
def say_hi():
    print("Hi!")

say_hi()
# Output: Hi! (printed 3 times)




When to Use Decorators
1. When you need repetitive behavior across multiple functions (e.g., logging, validation).
2. To enforce rules like authentication or performance checks.
3. In frameworks (e.g., Flask, Django) for routing or middleware.



Summary
- A decorator is a function that adds or modifies functionality of another function.
- It makes your code cleaner, modular, and reusable.
- Common use cases include logging, authentication, performance measurement, and input validation.