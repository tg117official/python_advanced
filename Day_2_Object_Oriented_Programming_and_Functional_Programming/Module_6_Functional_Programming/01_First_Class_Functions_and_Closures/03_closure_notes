Closures in Python

#What is a Closure?
A closure is a function that "remembers" the variables from its surrounding scope, even after that scope has
finished executing.

In simple words:
- Itâ€™s like a function with memory.
- A closure is created when:
  1. You have a nested function (a function inside another function).
  2. The inner function uses variables from the outer function.
  3. The outer function returns the inner function.



Basic Example of a Closure

def outer_function(x):
    def inner_function(y):
        return x + y
    return inner_function

closure = outer_function(5)
print(closure(3))  # Output: 8





# How It Works:
1. `outer_function(5)` is called, and `x` is set to `5`.
2. `outer_function` returns `inner_function`.
3. Even though `outer_function` has finished running, the `inner_function` still "remembers" the value of `x` from the outer scope.


def outer_function(x):
    def inner_function(y):
        def innermost_function(z) :
            return x+y+z
        return innermost_function
    return inner_function

# closure = outer_function(5)
print(outer_function(5)(5)(5))  # Output: 8

Code Explanation

1. Outer Function (`outer_function`):
   - `outer_function(x)` takes a parameter `x` and returns the `inner_function`.
   - Example: Calling `outer_function(5)` sets `x=5` and returns `inner_function`.

2. Inner Function (`inner_function`):
   - `inner_function(y)` takes a parameter `y` and returns the `innermost_function`.
   - Example: After `outer_function(5)`, calling `.inner_function(5)` sets `y=5` and returns `innermost_function`.

3. Innermost Function (`innermost_function`):
   - `innermost_function(z)` takes a parameter `z` and computes the result `x + y + z`.
   - `x` and `y` are remembered from the enclosing scopes (closure).
   - Example: After `outer_function(5)(5)`, calling `.innermost_function(5)` sets `z=5` and calculates `5 + 5 + 5 = 15`.

4. Execution Flow:
   - `outer_function(5)` returns `inner_function` where `x=5`.
   - `outer_function(5)(5)` calls `inner_function(5)` which sets `y=5` and returns `innermost_function`.
   - `outer_function(5)(5)(5)` calls `innermost_function(5)` where `z=5`, computes `x + y + z = 15`.

5. Final Result:
   - The output is `15` because the sum of `x=5`, `y=5`, and `z=5` is calculated in the innermost function.

Key Concept: Closures remember variables from their enclosing scopes.


Why Use Closures?
- Encapsulation: Closures allow you to keep some data private to a function.
- Reusable Functions: You can create specialized versions of a function dynamically.
- Stateful Functions: Closures "remember" values, making them useful for creating stateful behavior without using classes.



Industry-Level Use Cases

1. Function Factories:
   - Generate specialized functions dynamically.
   
   def multiplier(factor):
       def multiply_by(x):
           return x * factor
       return multiply_by

   double = multiplier(2)
   triple = multiplier(3)
   print(double(5))  # Output: 10
   print(triple(5))  # Output: 15
   

2. Data Hiding:
   - Create a private variable that is not accessible outside the closure.
   
   def counter():
       count = 0
       def increment():
           nonlocal count
           count += 1
           return count
       return increment

   count_up = counter()
   print(count_up())  # Output: 1
   print(count_up())  # Output: 2
   

3. Event Handlers in Web Development:
   - Closures can store context for event listeners or callback functions.
   
   def event_handler(event_name):
       def handle_event():
           print(f"Handling event: {event_name}")
       return handle_event

   click_handler = event_handler("click")
   click_handler()  # Output: "Handling event: click"
   

4. Caching or Memoization:
   - Store intermediate results to optimize performance.
   
   def memoize_add():
       cache = {}
       def add(a, b):
           if (a, b) not in cache:
               cache[(a, b)] = a + b
           return cache[(a, b)]
       return add

   add_cached = memoize_add()
   print(add_cached(1, 2))  # Output: 3
   print(add_cached(1, 2))  # Cached Output: 3
   

5. Decorators:
   - Closures are used to add functionality to existing functions.
   
   def logger(func):
       def wrapper(*args, kwargs):
           print(f"Calling {func.__name__} with {args}")
           return func(*args, kwargs)
       return wrapper

   @logger
   def greet(name):
       return f"Hello, {name}!"

   print(greet("Alice"))  # Logs the call and outputs: "Hello, Alice!"
   



When to Use Closures
1. When you need stateful functions without creating a class.
2. When you need to encapsulate logic and prevent access to certain variables.
3. When dynamically generating specialized functions.



Key Benefits
- Closures make your code more flexible and modular.
- They reduce global variable dependency.
- They simplify dynamic function generation.