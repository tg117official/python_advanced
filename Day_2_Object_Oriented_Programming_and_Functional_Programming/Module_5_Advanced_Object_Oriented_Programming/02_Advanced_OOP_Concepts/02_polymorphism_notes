Polymorphism in Python

#What is Polymorphism?
Polymorphism means "many forms." In Python, it allows a single interface (like a method or operation) to work with different types of data or objects.



#Key Features:
1. Method Polymorphism: Methods with the same name behave differently based on the object calling them.
2. Duck Typing: Python focuses on the behavior of an object, not its type (e.g., if it "quacks like a duck").
3. Operator Overloading: Operators (like `+`) behave differently based on the operands.



#Examples:

1. Polymorphism with Methods:

class Dog:
    def sound(self):
        return "Woof!"

class Cat:
    def sound(self):
        return "Meow!"

# Common interface
def make_sound(animal):
    print(animal.sound())

dog = Dog()
cat = Cat()

make_sound(dog)  # Output: Woof!
make_sound(cat)  # Output: Meow!


2. Polymorphism with Built-in Functions:

# len() works with different types
print(len("Hello"))      # Output: 5 (string length)
print(len([1, 2, 3]))    # Output: 3 (list length)


3. Operator Overloading:

# '+' works for different data types
print(5 + 3)           # Output: 8 (integer addition)
print("Hello " + "World")  # Output: Hello World (string concatenation)




#Relevance:
- Enables code flexibility.
- Promotes reusability by using the same method or function for different object types.
- Simplifies working with objects by focusing on their behavior, not their type.



#Use Cases:
- Handling different object types in a common interface.
- Dynamic behavior in frameworks and libraries.
- Implementing overloaded operators for custom classes.
