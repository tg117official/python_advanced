OOP in Python:

#What is OOP?
Object-Oriented Programming (OOP) is a programming paradigm in Python where we design and structure code around objects. An object is an instance of a class, and a class is like a blueprint for creating objects. It organizes data (attributes) and behavior (methods) together.



#Key Concepts:
1. Class: Blueprint for creating objects.
2. Object: Instance of a class with real data.
3. Attributes: Variables that store object data.
4. Methods: Functions that define object behavior.
5. Encapsulation: Restricting direct access to some parts of an object.
6. Inheritance: Reusing code by creating a new class from an existing one.
7. Polymorphism: Using the same method in different ways.
8. Abstraction: Hiding complex details to show only the essentials.



#Purpose of OOP:
- To organize and manage code more effectively.
- To enable reusability, scalability, and maintainability.
- To model real-world entities more naturally.



#Relevance of OOP in Python:
- Python is designed to support OOP, making it easy to build large, modular applications.
- Many Python libraries and frameworks (like Django, Flask) are built using OOP principles.



#Use Cases:
1. Game Development: Represent players, enemies, and items as objects.
2. Web Development: Model users, database records, etc., using classes.
3. Data Analysis: Organize data manipulation functions in objects.
4. GUI Applications: Represent windows, buttons, and other components as objects.



#Example:

class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def drive(self):
        print(f"{self.brand} {self.model} is driving.")

# Creating objects
my_car = Car("Tesla", "Model S")
my_car.drive()


Output:

Tesla Model S is driving.
