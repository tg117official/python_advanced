Basic Methods and Keywords in Python Multithreading

Python provides several tools and methods in the `threading` module to handle multithreading. Below is a simple explanation of the commonly used methods and keywords, along with examples.



1. `threading.Thread`
- Creates a thread to execute a target function concurrently.

Syntax:

thread = threading.Thread(target=your_function, args=(arg1, arg2,))
thread.start()


Example:

import threading

def print_numbers():
    for i in range(5):
        print(f"Number: {i}")

# Create and start a thread
thread = threading.Thread(target=print_numbers)
thread.start()
thread.join()  # Wait for the thread to finish




2. `start()`
- Starts a thread's execution.

Example:

def task():
    print("Thread started")

thread = threading.Thread(target=task)
thread.start()  # Starts the thread




3. `join()`
- Blocks the calling thread until the thread whose `join()` method is called is terminated.

Example:

def task():
    for i in range(3):
        print(f"Task {i}")

thread = threading.Thread(target=task)
thread.start()
thread.join()  # Main program waits until the thread completes
print("Thread completed")




4. `daemon`
- A daemon thread runs in the background and automatically exits when the main thread ends.

Syntax:

thread = threading.Thread(target=your_function)
thread.daemon = True


Example:

def background_task():
    while True:
        print("Daemon thread running")
        time.sleep(1)

thread = threading.Thread(target=background_task, daemon=True)
thread.start()
time.sleep(3)  # Main thread runs for 3 seconds
print("Main thread ends")




5. `Lock`
- Ensures that only one thread can access a shared resource at a time to prevent race conditions.

Syntax:

lock = threading.Lock()
with lock:
    # Critical section


Example:

import threading

counter = 0
lock = threading.Lock()

def increment():
    global counter
    for _ in range(1000):
        with lock:  # Ensures only one thread modifies `counter` at a time
            counter += 1

threads = [threading.Thread(target=increment) for _ in range(5)]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()

print(f"Counter: {counter}")




6. `Condition`
- Used for advanced synchronization between threads (e.g., producer-consumer problem).

Example:

condition = threading.Condition()


Example Usage:

import threading
import time

condition = threading.Condition()
shared_data = []

def producer():
    with condition:
        for i in range(3):
            shared_data.append(i)
            print(f"Produced: {i}")
            condition.notify()  # Signal the consumer
            time.sleep(1)

def consumer():
    with condition:
        while len(shared_data) < 3:
            condition.wait()  # Wait for producer's signal
        print(f"Consumed: {shared_data.pop(0)}")

thread1 = threading.Thread(target=producer)
thread2 = threading.Thread(target=consumer)

thread1.start()
thread2.start()
thread1.join()
thread2.join()




7. `Queue`
- A thread-safe queue for passing data between threads.

Syntax:

from queue import Queue

queue = Queue()


Example:

from queue import Queue
import threading

def producer(queue):
    for i in range(5):
        print(f"Produced: {i}")
        queue.put(i)

def consumer(queue):
    while not queue.empty():
        item = queue.get()
        print(f"Consumed: {item}")

queue = Queue()
thread1 = threading.Thread(target=producer, args=(queue,))
thread2 = threading.Thread(target=consumer, args=(queue,))

thread1.start()
thread1.join()
thread2.start()
thread2.join()




8. `ThreadPoolExecutor`
- A high-level way to manage a pool of threads and distribute tasks among them.

Syntax:

from concurrent.futures import ThreadPoolExecutor

with ThreadPoolExecutor(max_workers=3) as executor:
    executor.submit(task, arg)


Example:

from concurrent.futures import ThreadPoolExecutor

def square(n):
    print(f"Square of {n}: {n2}")

numbers = [1, 2, 3, 4]
with ThreadPoolExecutor(max_workers=2) as executor:
    executor.map(square, numbers)




9. `Timer`
- Executes a function after a delay.

Syntax:

threading.Timer(interval, function).start()


Example:

import threading

def delayed_task():
    print("Task executed after delay")

threading.Timer(3, delayed_task).start()  # Executes after 3 seconds




10. `active_count()`
- Returns the number of currently active threads.

Example:

import threading

def task():
    time.sleep(1)

thread1 = threading.Thread(target=task)
thread2 = threading.Thread(target=task)

thread1.start()
thread2.start()

print(f"Active threads: {threading.active_count()}")




Summary of Common Methods and Keywords:
| Keyword/Method       | Purpose                                                                 |
| `threading.Thread`        | Create and manage threads.                                                 |
| `start()`                 | Start thread execution.                                                   |
| `join()`                  | Wait for thread completion.                                               |
| `daemon`                 | Run background threads that terminate with the main thread.               |
| `Lock`                    | Synchronize access to shared resources.                                   |
| `Condition`               | Advanced thread synchronization.                                          |
| `Queue`                   | Thread-safe way to pass data between threads.                             |
| `ThreadPoolExecutor`      | Simplify managing multiple threads.                                       |
| `Timer`                   | Execute tasks after a delay.                                              |
| `active_count()`          | Get the number of active threads.                                         |