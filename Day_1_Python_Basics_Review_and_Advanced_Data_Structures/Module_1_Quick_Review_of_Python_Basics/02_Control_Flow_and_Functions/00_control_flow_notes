Control Flow in Python

#What is Control Flow?
- Control flow is how Python decides which lines of code to execute and in what order.
- It allows you to make decisions, repeat actions, and control the behavior of your program.



Why is Control Flow Important?
1. Decision Making:
   - Execute specific blocks of code based on conditions.
2. Repetition:
   - Repeat tasks using loops.
3. Flexibility:
   - Build dynamic and interactive programs.



Types of Control Flow

1. Conditional Statements:
   - Execute code only if certain conditions are met.
2. Loops:
   - Repeat a block of code multiple times.
3. Branching:
   - Exit a loop or skip parts of the code.
4. Function Calls:
   - Transfer control to reusable blocks of code.



1. Conditional Statements

#if-elif-else
- Used for decision-making based on conditions.

Syntax:

if condition:
    # Code to execute if condition is True
elif another_condition:
    # Code to execute if another_condition is True
else:
    # Code to execute if none of the above conditions are True


Example:

age = 18
if age < 18:
    print("You are a minor.")
elif age == 18:
    print("You just became an adult!")
else:
    print("You are an adult.")




2. Loops

#for Loop
- Used to iterate over a sequence (e.g., list, range, string).

Syntax:

for item in sequence:
    # Code to execute for each item


Example:

for i in range(5):
    print(i)  # Output: 0, 1, 2, 3, 4


#while Loop
- Repeats as long as the condition is `True`.

Syntax:

while condition:
    # Code to execute while the condition is True


Example:

count = 0
while count < 5:
    print(count)
    count += 1




3. Branching and Loop Control

#break
- Exits the loop immediately.

Example:

for i in range(10):
    if i == 5:
        break
    print(i)  # Output: 0, 1, 2, 3, 4


#continue
- Skips the current iteration and moves to the next one.

Example:

for i in range(5):
    if i == 2:
        continue
    print(i)  # Output: 0, 1, 3, 4


#pass
- Does nothing (a placeholder).

Example:

for i in range(5):
    if i == 2:
        pass  # Placeholder for future code
    print(i)




4. Function Calls
- Functions allow you to organize your code and control the flow by calling reusable blocks of code.

Example:

def greet(name):
    print(f"Hello, {name}!")

greet("Alice")  # Output: Hello, Alice!




Nested Control Flow

You can combine control flow statements for complex behavior.

Example:

for i in range(3):
    if i % 2 == 0:
        print(f"{i} is even")
    else:
        print(f"{i} is odd")




Industry-Level Use Cases

#1. Decision-Making in Web Applications
- Example: Show different content based on user roles.

role = "admin"
if role == "admin":
    print("Access to admin dashboard.")
elif role == "user":
    print("Access to user dashboard.")
else:
    print("Access denied.")




#2. Data Processing with Loops
- Process large datasets using loops.

data = [10, 20, 30, 40, 50]
for value in data:
    print(value * 2)  # Output: 20, 40, 60, 80, 100




#3. Retry Logic with while Loop
- Retry a task (e.g., API request) until it succeeds.

attempts = 0
while attempts < 3:
    response = "failed"  # Simulate a failed response
    if response == "success":
        print("Task succeeded.")
        break
    attempts += 1
    print("Retrying...")




#4. Conditional Filters
- Filter data based on conditions.

numbers = [1, 2, 3, 4, 5]
even_numbers = [n for n in numbers if n % 2 == 0]
print(even_numbers)  # Output: [2, 4]




Best Practices for Control Flow

1. Keep Conditions Simple:
   - Avoid overly complex conditions.

   if age >= 18 and has_id:
       print("Access granted.")


2. Use Meaningful Loops:
   - Avoid infinite loops unless necessary.

3. Optimize Loops:
   - Minimize operations inside loops to improve performance.

4. Avoid Deep Nesting:
   - Too many nested ifs or loops make code harder to read. Break them into functions.

5. Use Functions:
   - Encapsulate repetitive logic in functions for better readability.



Summary
- Control flow determines the order in which code executes.
- Key tools include:
  - Conditional Statements (`if`, `elif`, `else`).
  - Loops (`for`, `while`).
  - Branching (`break`, `continue`, `pass`).
  - Function Calls to organize reusable code.
- Itâ€™s widely used in decision-making, data processing, and automation in industry projects.

