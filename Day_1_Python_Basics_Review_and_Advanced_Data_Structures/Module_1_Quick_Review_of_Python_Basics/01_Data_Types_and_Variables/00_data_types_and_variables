Data Types and Variables in Python

#What are Data Types?
- Data types define the kind of data that a variable can store.
- Examples: Numbers, text, lists, etc.
- Python is dynamically typed, meaning you donâ€™t need to declare the type of a variable; it is inferred automatically.



What are Variables?
- A variable is a named container that holds data.
- Think of it as a label for a value.

Example:

x = 10  # x is a variable holding the value 10
name = "Alice"  # name is a variable holding the string "Alice"




Purpose of Data Types and Variables
1. Store Data:
   - Variables hold information like numbers, names, or lists.
2. Perform Operations:
   - Perform calculations, manipulations, or comparisons using data types.
3. Improve Code Readability:
   - Use descriptive variable names to make your code easier to understand.



Common Data Types in Python

#1. Numeric Types
- `int`: Whole numbers (e.g., 1, -3, 100).
- `float`: Decimal numbers (e.g., 1.5, -0.99, 3.14).
- `complex`: Complex numbers (e.g., 1+2j).

Example:

a = 10       # int
b = 3.14     # float
c = 1 + 2j   # complex


#2. String (`str`)
- Stores sequences of characters (e.g., words, sentences).
- Use single (`'`) or double quotes (`"`).

Example:

name = "Alice"
message = 'Hello, World!'


#3. Boolean (`bool`)
- Represents `True` or `False` values.

Example:

is_happy = True
is_sad = False


#4. List
- A collection of ordered, changeable items.
- Can store multiple data types.

Example:

fruits = ["apple", "banana", "cherry"]


#5. Tuple
- Similar to a list but immutable (cannot be changed after creation).

Example:

coordinates = (10, 20)


#6. Dictionary (`dict`)
- A collection of key-value pairs.
- Keys must be unique.

Example:

person = {"name": "Alice", "age": 25}


#7. Set
- A collection of unique, unordered items.

Example:

unique_numbers = {1, 2, 3, 3}  # Output: {1, 2, 3}


#8. NoneType
- Represents a null or no value (`None`).

Example:

x = None




Declaring Variables

1. Variable Assignment:
   - Use the `=` operator.

x = 5
name = "Alice"


2. Multiple Assignments:
   - Assign values to multiple variables in one line.

a, b, c = 1, 2, 3


3. Same Value to Multiple Variables:

x = y = z = 10




Rules for Variable Names
1. Can include letters, numbers, and underscores (`_`).
2. Cannot start with a number.
3. Case-sensitive:
   - `Name` and `name` are different variables.
4. Avoid Python keywords like `for`, `while`, `if`, etc.



Type Checking and Conversion

1. Check Data Type:
   - Use `type()` to check the type of a variable.

x = 10
print(type(x))  # Output: <class 'int'>


2. Convert Data Types:
   - Use built-in functions like `int()`, `float()`, `str()`.

x = "100"
y = int(x)  # Converts string to integer
z = float(y)  # Converts integer to float




Examples of Common Operations

#1. Numeric Operations

x = 10
y = 3
print(x + y)  # Addition: 13
print(x - y)  # Subtraction: 7
print(x * y)  # Multiplication: 30
print(x / y)  # Division: 3.3333
print(x // y) # Floor Division: 3
print(x % y)  # Modulus: 1


#2. String Operations

name = "Alice"
print(name.upper())  # Output: "ALICE"
print(name.lower())  # Output: "alice"
print(name + " Smith")  # Concatenation: "Alice Smith"


#3. List Operations

numbers = [1, 2, 3]
numbers.append(4)  # Add item to list
print(numbers)  # Output: [1, 2, 3, 4]

numbers.pop()  # Remove last item
print(numbers)  # Output: [1, 2, 3]


#4. Dictionary Operations

person = {"name": "Alice", "age": 25}
print(person["name"])  # Access value by key: "Alice"
person["age"] = 30  # Update value




Industry-Level Use Cases

#1. Data Processing
- Use lists, tuples, and dictionaries to organize and process large datasets.

data = [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}]


#2. Web Development
- Use strings and dictionaries to handle user inputs and configurations.

user = {"username": "alice123", "password": "securepass"}


#3. Machine Learning
- Use NumPy arrays (specialized lists) for numerical computations.

import numpy as np
data = np.array([1, 2, 3, 4])


#4. Database Interaction
- Use dictionaries to manage records and SQL queries.

record = {"id": 1, "name": "Alice", "age": 25}




Best Practices

1. Use Meaningful Variable Names:
   - Avoid single-letter names (e.g., use `age` instead of `a`).

   age = 25  # Good
   a = 25    # Not recommended


2. Initialize Variables:
   - Always assign an initial value.

   count = 0


3. Use Constants for Fixed Values:
   - Use uppercase for constants.

   PI = 3.14159


4. Avoid Hardcoding:
   - Use variables to make your code reusable.

   base_salary = 50000
   bonus = 10000
   total_salary = base_salary + bonus




Summary
- Data types: Define the type of data a variable can hold (e.g., `int`, `str`, `list`).
- Variables: Named containers that store data.
- Python allows dynamic typing, meaning you can reassign variables to different types.
- Best practices include using meaningful names, initializing variables, and checking types.
