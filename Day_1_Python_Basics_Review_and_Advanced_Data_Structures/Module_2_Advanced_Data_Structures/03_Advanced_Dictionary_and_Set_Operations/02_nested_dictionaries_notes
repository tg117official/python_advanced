Python Nested Dictionaries

# What is a Nested Dictionary?
A nested dictionary is a dictionary inside another dictionary.
It's a way to organize complex data hierarchically, like layers within layers.

#How does it look?

nested_dict = {
    "outer_key1": {
        "inner_key1": "value1",
        "inner_key2": "value2"
    },
    "outer_key2": {
        "inner_key3": "value3",
        "inner_key4": "value4"
    }
}




# Why use a Nested Dictionary?
1. Organize complex data: Store related information together in a structured way.
2. Access nested data: Quickly fetch specific information from layers.
3. Flexibility: It's like a tree structure where each node can have multiple sub-nodes.



# How to Use Nested Dictionaries?

1. Accessing Values:
   - Use multiple keys to get a value.

   print(nested_dict["outer_key1"]["inner_key1"])  # Output: "value1"


2. Adding/Updating Data:
   - Add new inner dictionaries or modify existing ones.

   nested_dict["outer_key1"]["inner_key3"] = "new_value"


3. Looping Through Nested Dictionaries:
   - Use a loop to go through each layer.

   for outer_key, inner_dict in nested_dict.items():
       print(f"{outer_key}: {inner_dict}")




# Real-Life Example:

- Scenario: Storing Employee Data
   - Each department has employees, and each employee has details.

   employees = {
       "HR": {
           "E101": {"name": "Alice", "age": 30, "role": "Manager"},
           "E102": {"name": "Bob", "age": 25, "role": "Recruiter"}
       },
       "IT": {
           "E201": {"name": "Charlie", "age": 35, "role": "Developer"},
           "E202": {"name": "David", "age": 29, "role": "Tester"}
       }
   }

   # Access details of E201
   print(employees["IT"]["E201"]["name"])  # Output: "Charlie"




# Industry-Level Use Cases

1. Data Representation in APIs:
   - Nested dictionaries are often used to handle JSON-like data structures.
   - Example: A weather API response.

   weather_data = {
       "location": {"city": "New York", "country": "USA"},
       "forecast": {
           "day1": {"temp": 30, "condition": "Sunny"},
           "day2": {"temp": 25, "condition": "Cloudy"}
       }
   }


2. Configuration Management:
   - Store application or system settings in a structured way.

   config = {
       "database": {
           "host": "localhost",
           "port": 5432,
           "user": "admin"
       },
       "logging": {
           "level": "DEBUG",
           "format": "%(asctime)s - %(message)s"
       }
   }


3. E-commerce Product Catalog:
   - Organize categories, subcategories, and products.

   catalog = {
       "Electronics": {
           "Phones": {"P101": "iPhone", "P102": "Samsung"},
           "Laptops": {"P201": "Dell", "P202": "HP"}
       },
       "Furniture": {
           "Chairs": {"P301": "Office Chair", "P302": "Gaming Chair"},
           "Tables": {"P401": "Dining Table", "P402": "Coffee Table"}
       }
   }


4. User Role Management:
   - Assign roles and permissions to users.

   roles = {
       "Admin": {"can_edit": True, "can_delete": True, "can_view": True},
       "Editor": {"can_edit": True, "can_delete": False, "can_view": True},
       "Viewer": {"can_edit": False, "can_delete": False, "can_view": True}
   }


5. Machine Learning/AI Pipelines:
   - Organize model configurations, hyperparameters, and results.

   ml_pipeline = {
       "model1": {"accuracy": 0.95, "params": {"lr": 0.01, "epochs": 10}},
       "model2": {"accuracy": 0.92, "params": {"lr": 0.001, "epochs": 15}}
   }




# When to Use Nested Dictionaries:
- When your data naturally has a hierarchy or relationships.
- When you need to store structured data in Python (e.g., JSON-like data).
- When working with configurations, data processing pipelines, or organizing entities (e.g., users, products, etc.).



