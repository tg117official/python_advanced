Python NumPy

# What is NumPy?
- NumPy (Numerical Python) is a powerful Python library used to work with numbers and data in arrays.
- It provides tools to perform fast mathematical operations on large datasets.
- It's like a supercharged Excel for Python, but much faster and more efficient.


# Why is NumPy Special?
1. Fast Calculations: NumPy arrays are faster than Python lists for large amounts of data.
2. Memory Efficient: Uses less memory compared to traditional Python lists.
3. Supports Multi-Dimensional Arrays: You can work with 1D, 2D (like matrices), and even higher dimensions.



# Purpose of NumPy
- Simplify data manipulation and mathematical operations.
- Provide tools for scientific computing, machine learning, and data analysis.



# How Does It Work?
- Array: A collection of numbers stored in a grid.
- Operations: Perform calculations (like sum, average, multiplication) on all numbers in an array at once.

# NumPy vs lists :
- NumPy arrays can hold other data types (e.g., objects, strings) using `dtype=object`.
- However, this negates NumPy's performance benefits, as element-wise operations are no longer optimized.
- Stick to homogeneous numeric types for computational efficiency.
- Use arrays with mixed types only when absolutely necessary, as Python lists handle such scenarios better.

# Basic Example:

import numpy as np

# Create an array
numbers = np.array([1, 2, 3, 4, 5])

# Perform operations
print(numbers * 2)  # Multiply each number by 2
# Output: [ 2  4  6  8 10]

print(np.sum(numbers))  # Sum of all numbers
# Output: 15




Industry-Level Use Cases

1. Data Analysis:
   - Load large datasets and quickly process them.
   - Example: Calculate the average sales from millions of transactions.

   sales = np.array([100, 200, 300, 400])
   print(np.mean(sales))  # Output: 250


2. Machine Learning:
   - NumPy is often the backbone of ML libraries like TensorFlow and PyTorch.
   - Used to manipulate weights, biases, and perform matrix calculations.

3. Image Processing:
   - Images are stored as arrays of pixel values.
   - Example: Change brightness or apply filters.

   image = np.array([[255, 200], [100, 50]])  # 2x2 grayscale image
   brighter_image = image + 50
   # Output: [[255 250]
   #          [150 100]]


4. Scientific Computing:
   - Solve equations, model systems, and simulate experiments.

5. Stock Market Analysis:
   - Analyze price movements, calculate rolling averages, or compare trends.

6. Data Engineering:
   - Used for data preprocessing:
     - Normalize data.
     - Remove outliers.
     - Handle missing values.



Key Features of NumPy

1. NumPy Arrays:
   - Replace Python lists for better performance.

   arr = np.array([1, 2, 3, 4])
   print(arr)
   # Output: [1 2 3 4]


2. Multi-Dimensional Arrays:
   - Work with 2D arrays (like matrices) and more.

   matrix = np.array([[1, 2], [3, 4]])
   print(matrix)
   # Output:
   # [[1 2]
   #  [3 4]]


3. Broadcasting:
   - Perform operations on arrays of different shapes.

   arr = np.array([1, 2, 3])
   print(arr + 5)  # Add 5 to every element
   # Output: [6 7 8]


4. Mathematical Operations:
   - Sum, average, min, max, and more.

   arr = np.array([10, 20, 30])
   print(np.mean(arr))  # Output: 20.0


5. Linear Algebra:
   - Matrix multiplication, determinants, eigenvalues.

   A = np.array([[1, 2], [3, 4]])
   B = np.array([[5, 6], [7, 8]])
   print(np.dot(A, B))  # Matrix multiplication
   # Output:
   # [[19 22]
   #  [43 50]]


6. Random Number Generation:
   - Create random datasets for testing or simulations.

   random_numbers = np.random.randint(1, 100, 5)
   print(random_numbers)
   # Output: [42 17 73 50 26]




Real-Life Examples

1. E-Commerce:
   - Analyze user purchases and predict trends.
   - Example: Find the most popular price range.

2. Healthcare:
   - Process medical images (e.g., X-rays, MRIs) stored as arrays.
   - Perform quick operations like enhancing contrast.

3. Weather Forecasting:
   - Use NumPy arrays to model weather data (temperature, pressure, etc.).

4. Finance:
   - Simulate stock price movements and calculate risks.



When to Use NumPy?
- When dealing with large datasets.
- When performing repetitive numerical calculations.
- When needing fast and efficient data processing.
- When working on scientific or machine learning projects.


What we'll learn

Basic :
 array creation,
 reshaping,
 arithmetic operations,
 statistical functions,
 random number generation,
 stacking,
 matrix multiplication,
 linspace,
 conditional operations

Intermediate :
 Array generation using fromfunction.
 Conditional transformations using np.where.
 Normalization techniques.
 Axis-based operations (row-wise, column-wise maximums).
 Splitting arrays and computing statistics.
 Diagonal extraction and operations.
 3D array manipulation with conditions.
 Cumulative sum calculations along rows and columns.
 Identifying indices of top elements.
 Matrix updates based on divisibility conditions.


Advanced :
 Sorting based on row sums (complex indexing).
 3D normalization (min-max scaling).
 Finding the most frequent element in an array.
 Dynamic updates based on positional logic.
 Simulating and analyzing probabilities in random experiments.
 Matrix border manipulation.
 Creating frequency dictionaries from arrays.
 Finding top values and their positions in matrices.
 Working with high-dimensional (4D) arrays and reshaping.
 Combining element-wise operations with advanced functions like max.
