Index: course_content
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Day 1: Python Basics Review and Advanced Data Structures (8 Hours)\r\n- Module 1: Quick Review of Python Basics\r\n  - Data Types and Variables\r\n  - Control Flow and Functions\r\n  - Modules and Packages\r\n- Module 2: Advanced Data Structures\r\n  - Collections Module\r\n  - Working with Arrays and Matrices\r\n  - Advanced Dictionary and Set Operations\r\n- Module 3: File Handling and Exception Management\r\n  - File Handling\r\n  - Exception Handling\r\n- Module 4: Working with Regular Expressions (Regex)\r\n  - Introduction to Regex\r\n  - Regex Patterns and Applications\r\n\r\nDay 2: Object-Oriented Programming and Functional Programming (8 Hours)\r\n- Module 5: Advanced Object-Oriented Programming (OOP)\r\n  - Class and Object Basics Review\r\n  - Advanced OOP Concepts\r\n  - Magic/Dunder Methods\r\n- Module 6: Functional Programming\r\n  - First-Class Functions and Closures\r\n  - Using map, filter, and reduce\r\n  - Lambda Expressions and Anonymous Functions\r\n  - Decorators\r\n- Module 7: Generators and Iterators\r\n  - Introduction to Generators\r\n  - Custom Iterators\r\n  - Applications of Generators\r\n\r\nDay 3: Advanced Libraries, Concurrency, and Best Practices (8 Hours)\r\n- Module 8: Working with Advanced Libraries\r\n  - Data Processing with Pandas\r\n  - Web Scraping with BeautifulSoup and Requests\r\n- Module 9: Asynchronous Programming\r\n  - Introduction to AsyncIO\r\n  - Asyncio and Awaitable Objects\r\n  - Practical Applications of Async Programming\r\n- Module 10: Testing and Debugging in Python\r\n  - Unit Testing with unittest\r\n  - Debugging Techniques\r\n  - Introduction to Pytest\r\n- Module 11: Python Best Practices and Performance Optimization\r\n  - Code Style and PEP 8\r\n  - Writing Efficient Python Code\r\n  - Documentation and Code Comments\r\n\r\n\r\nDay_4 : Code Obfuscation_Multithreaded_programming\r\n- Module_12_Code Obfuscation\r\n- Module_13_Multithreaded Programming\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/course_content b/course_content
--- a/course_content	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/course_content	(date 1733988559968)
@@ -50,3 +50,4 @@
 Day_4 : Code Obfuscation_Multithreaded_programming
 - Module_12_Code Obfuscation
 - Module_13_Multithreaded Programming
+- Module_14_Memory Management
\ No newline at end of file
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\n\r\nimport requests\r\nfrom unittest.mock import patch\r\nimport asyncio\r\n\r\nasync def async_fetch_data(url):\r\n    await asyncio.sleep(1)  # Simulates delay\r\n    response = requests.get(url)\r\n    if response.status_code == 200:\r\n        return response.json()\r\n    else:\r\n        raise ValueError(\"Failed to fetch data\")\r\n\r\nclass TestAsyncFunction(unittest.IsolatedAsyncioTestCase):\r\n    @patch(\"requests.get\")\r\n    async def test_async_fetch_data(self, mock_get):\r\n        mock_get.return_value.status_code = 200\r\n        mock_get.return_value.json.return_value = {\"data\": \"value\"}\r\n        result = await async_fetch_data(\"https://example.com\")\r\n        self.assertEqual(result, {\"data\": \"value\"})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py	(date 1733992757580)
@@ -1,21 +1,24 @@
 import unittest
-
 import requests
 from unittest.mock import patch
-import asyncio
 
-async def async_fetch_data(url):
-    await asyncio.sleep(1)  # Simulates delay
-    response = requests.get(url)
+def fetch_data(api_url):
+    response = requests.get(api_url)
     if response.status_code == 200:
         return response.json()
     else:
         raise ValueError("Failed to fetch data")
 
-class TestAsyncFunction(unittest.IsolatedAsyncioTestCase):
+
+class TestAPI(unittest.TestCase):
     @patch("requests.get")
-    async def test_async_fetch_data(self, mock_get):
+    def test_fetch_data_success(self, mock_get):
         mock_get.return_value.status_code = 200
-        mock_get.return_value.json.return_value = {"data": "value"}
-        result = await async_fetch_data("https://example.com")
-        self.assertEqual(result, {"data": "value"})
\ No newline at end of file
+        mock_get.return_value.json.return_value = {"key": "value"}
+        self.assertEqual(fetch_data("https://example.com"), {"key": "value"})
+
+    @patch("requests.get")
+    def test_fetch_data_failure(self, mock_get):
+        mock_get.return_value.status_code = 404
+        with self.assertRaises(ValueError):
+            fetch_data("https://example.com")
\ No newline at end of file
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def calculate_sum(numbers):\r\n    sum = 0\r\n    for n in numbers :\r\n        sum = sum + n\r\n\r\n    return sum\r\n\r\nprint(\"Exercise 1 Result:\", calculate_sum([1, 2, 3, 4, 5]))  # Expected: 15, Buggy Output: 6\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py	(date 1733996585610)
@@ -1,8 +1,11 @@
-def calculate_sum(numbers):
+import pdb
+
+def iterate_and_accumulate(l):
     sum = 0
-    for n in numbers :
-        sum = sum + n
-
+    for i in l :
+        sum = sum + i
     return sum
 
-print("Exercise 1 Result:", calculate_sum([1, 2, 3, 4, 5]))  # Expected: 15, Buggy Output: 6
+l1 = [1,2,3,4,5,6,7,8,9,10]
+res = iterate_and_accumulate(l1)
+print(res)
\ No newline at end of file
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/03_multi_threading_advanced.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/03_multi_threading_advanced.py b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/03_multi_threading_advanced.py
new file mode 100644
--- /dev/null	(date 1733989527264)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/03_multi_threading_advanced.py	(date 1733989527264)
@@ -0,0 +1,77 @@
+# Advanced Multithreading Example: Real-Time Stock Price Monitoring System
+# Problem Statement:
+# Build a multithreaded Python application that simulates real-time stock price monitoring.
+# - A producer thread generates random stock prices for multiple companies.
+# - Consumer threads process and log these prices to different files (one per company).
+# - A summary thread periodically computes and displays the average price for each company.
+
+import threading
+import time
+import random
+from queue import Queue
+
+# Global dictionary to hold stock data and associated locks
+stock_data = {
+    "CompanyA": Queue(),
+    "CompanyB": Queue(),
+    "CompanyC": Queue()
+}
+stock_locks = {company: threading.Lock() for company in stock_data}
+
+# Function to simulate stock price generation (Producer Thread)
+def stock_price_generator():
+    companies = list(stock_data.keys())
+    while True:
+        company = random.choice(companies)
+        price = round(random.uniform(100, 500), 2)
+        with stock_locks[company]:
+            stock_data[company].put(price)
+        print(f"Generated price {price} for {company}")
+        time.sleep(0.5)  # Simulate delay in stock price updates
+
+# Function to log stock prices to files (Consumer Threads)
+def stock_price_logger(company):
+    file_name = f"{company}_prices.txt"
+    with open(file_name, "w") as file:
+        while True:
+            with stock_locks[company]:
+                if not stock_data[company].empty():
+                    price = stock_data[company].get()
+                    file.write(f"{time.ctime()}: {price}\n")
+                    print(f"Logged {price} for {company} in {file_name}")
+            time.sleep(1)  # Simulate delay in logging
+
+# Function to compute and display average prices (Summary Thread)
+def average_price_summary():
+    while True:
+        time.sleep(5)  # Compute average prices every 5 seconds
+        print("\n=== Stock Price Summary ===")
+        for company in stock_data:
+            with stock_locks[company]:
+                prices = list(stock_data[company].queue)
+            if prices:
+                avg_price = round(sum(prices) / len(prices), 2)
+                print(f"{company}: Average Price = {avg_price}")
+            else:
+                print(f"{company}: No data available")
+        print("===========================\n")
+
+if __name__ == "__main__":
+    # Create and start the producer thread
+    producer_thread = threading.Thread(target=stock_price_generator, daemon=True)
+    producer_thread.start()
+
+    # Create and start consumer threads for each company
+    consumer_threads = []
+    for company in stock_data:
+        thread = threading.Thread(target=stock_price_logger, args=(company,), daemon=True)
+        consumer_threads.append(thread)
+        thread.start()
+
+    # Create and start the summary thread
+    summary_thread = threading.Thread(target=average_price_summary, daemon=True)
+    summary_thread.start()
+
+    # Run the main program for 20 seconds
+    time.sleep(20)
+    print("\nMain program ends. Logs are saved in company-specific files.")
\ No newline at end of file
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py
--- a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py	(date 1733989392540)
@@ -1,0 +1,123 @@
+# Intermediate Multithreading Exercises in Python
+# These exercises build on fundamental multithreading concepts and explore more complex scenarios.
+
+import threading
+import time
+from queue import Queue
+from concurrent.futures import ThreadPoolExecutor
+
+# Exercise 1: Thread Synchronization with Condition Variables
+# Problem: Create a program where one thread generates numbers and another processes them, synchronized using a condition variable.
+# Goal: Learn thread coordination using `threading.Condition`.
+class SharedResource:
+    def __init__(self):
+        self.data = None
+        self.condition = threading.Condition()
+
+def producer(resource):
+    for i in range(1, 6):
+        with resource.condition:
+            print(f"Producer generated: {i}")
+            resource.data = i
+            resource.condition.notify()
+            resource.condition.wait()
+
+def consumer(resource):
+    for _ in range(5):
+        with resource.condition:
+            resource.condition.wait()
+            print(f"Consumer processed: {resource.data}")
+            resource.condition.notify()
+
+resource = SharedResource()
+producer_thread = threading.Thread(target=producer, args=(resource,))
+consumer_thread = threading.Thread(target=consumer, args=(resource,))
+
+producer_thread.start()
+consumer_thread.start()
+producer_thread.join()
+consumer_thread.join()
+
+# Exercise 2: Thread Pool with Results
+# Problem: Use a thread pool to download multiple files concurrently and store their results in a dictionary.
+# Goal: Work with `ThreadPoolExecutor` to manage results from multiple threads.
+import random
+
+def download_file(file_id):
+    time.sleep(random.uniform(1, 3))  # Simulate download delay
+    print(f"File {file_id} downloaded.")
+    return f"Content of file {file_id}"
+
+file_ids = [1, 2, 3, 4, 5]
+results = {}
+
+with ThreadPoolExecutor(max_workers=3) as executor:
+    futures = {executor.submit(download_file, file_id): file_id for file_id in file_ids}
+    for future in futures:
+        file_id = futures[future]
+        results[file_id] = future.result()
+
+print("Downloaded Files:", results)
+
+# Exercise 3: Parallel Search
+# Problem: Implement a multithreaded search that looks for a target number in multiple segments of a large list.
+# Goal: Divide a task into chunks and search in parallel using threads.
+def search_segment(segment, target, result, index):
+    if target in segment:
+        print(f"Found {target} in segment {index}.")
+        result[0] = True
+    else:
+        print(f"Target not in segment {index}.")
+
+target = 42
+large_list = list(range(1, 101))
+segments = [large_list[i:i+20] for i in range(0, len(large_list), 20)]
+result = [False]
+threads = []
+
+for i, segment in enumerate(segments):
+    thread = threading.Thread(target=search_segment, args=(segment, target, result, i))
+    threads.append(thread)
+    thread.start()
+
+for thread in threads:
+    thread.join()
+
+print("Search Result:", "Found" if result[0] else "Not Found")
+
+# Exercise 4: Multithreaded Logging System
+# Problem: Implement a logging system where multiple threads log messages to a shared file safely.
+# Goal: Use threading locks to handle file operations.
+log_lock = threading.Lock()
+def log_message(file_path, message):
+    with log_lock:
+        with open(file_path, "a") as log_file:
+            log_file.write(message + "\n")
+
+log_file_path = "threaded_log.txt"
+threads = []
+
+for i in range(5):
+    thread = threading.Thread(target=log_message, args=(log_file_path, f"Log from thread {i}"))
+    threads.append(thread)
+    thread.start()
+
+for thread in threads:
+    thread.join()
+
+print(f"Logs written to {log_file_path}.")
+
+# Exercise 5: Task Scheduling with Timers
+# Problem: Schedule periodic tasks using a thread-based timer.
+# Goal: Use `threading.Timer` to execute a task at fixed intervals.
+def scheduled_task():
+    print(f"Task executed at {time.ctime()}.")
+    threading.Timer(2, scheduled_task).start()
+
+print("Starting scheduled task...")
+threading.Timer(2, scheduled_task).start()
+time.sleep(10)  # Allow tasks to run for 10 seconds
+print("Main program ends.")
+
+# Summary: These exercises explore thread coordination, thread pools, parallel tasks, thread-safe file operations, and timers.
+# Each exercise demonstrates an intermediate use case for multithreading in Python.
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/playground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/playground.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/playground.py
new file mode 100644
--- /dev/null	(date 1733978569038)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/playground.py	(date 1733978569038)
@@ -0,0 +1,77 @@
+import requests
+from bs4 import BeautifulSoup
+
+def fetch_html(url):
+    """
+    Fetches and parses the HTML content of a given website URL.
+
+    Parameters:
+        url (str): The URL of the website to fetch.
+
+    Returns:
+        BeautifulSoup: The parsed HTML content as a BeautifulSoup object, or None if the request fails.
+    """
+    try:
+        response = requests.get(url)
+        if response.status_code == 200:
+            return BeautifulSoup(response.text, 'html.parser')
+        else:
+            print(f"Failed to fetch HTML content. Status code: {response.status_code}")
+            return None
+    except requests.exceptions.RequestException as e:
+        print(f"An error occurred: {e}")
+        return None
+
+# Example usage
+if __name__ == "__main__":
+    url = "https://www.amazon.in/"
+    soup = fetch_html(url)
+
+    if soup:
+    #     # Basic examples for accessing tags and content
+    #     print("1. Title Tag:", soup.title)  # Prints the <title> tag
+    #     print("2. Title Text:", soup.title.string)  # Prints the text inside the <title> tag
+
+        print("3. Meta Tags:")
+        for meta in soup.find_all('meta'):
+            print(meta)
+        #
+        # print("4. First Link:", soup.find('a'))  # Prints the first <a> tag
+        #
+        # print("5. All Links:")
+        # for link in soup.find_all('a', limit=5):  # Prints the first 5 <a> tags
+        #     print(link.get('href'))
+        #
+        # print("6. First Div Tag:", soup.find('div'))  # Prints the first <div> tag
+        #
+        # print("7. All Div Tags:")
+        # for div in soup.find_all('div', limit=5):  # Prints the first 5 <div> tags
+        #     print(div)
+        #
+        # print("8. First Image Tag:", soup.find('img'))  # Prints the first <img> tag
+        #
+        # print("9. All Image Sources:")
+        # for img in soup.find_all('img', limit=5):  # Prints the first 5 image sources
+        #     print(img.get('src'))
+        #
+        # print("10. All Headers (h1, h2, h3):")
+        # for header in soup.find_all(['h1', 'h2', 'h3'], limit=5):  # Prints the first 5 header tags
+        #     print(header.text)
+        #
+        # print("11. Footer Section:", soup.find('footer'))  # Prints the <footer> tag if present
+        #
+        # print("12. Search for a specific class:")
+        # element = soup.find(class_="navFooterDescText")  # Replace with an actual class
+        # print(element)
+        #
+        # print("13. Extracting all CSS Links:")
+        # for css in soup.find_all('link', {'rel': 'stylesheet'}):
+        #     print(css.get('href'))
+        #
+        # print("14. Extracting all JavaScript Files:")
+        # for script in soup.find_all('script'):
+        #     print(script.get('src'))
+        #
+        # print("15. Paragraphs in the Page:")
+        # for paragraph in soup.find_all('p', limit=5):  # Prints the first 5 paragraphs
+        #     print(paragraph.text)
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Unit Testing with `unittest` in Python\r\n\r\n# What is Unit Testing?\r\n- Unit testing is the process of testing small, individual pieces of your code (called \"units\") to ensure they work correctly.\r\n- In Python, the `unittest` module is a built-in library used to perform unit tests.\r\n\r\n\r\n\r\nWhy Do We Need Unit Testing?\r\n1. Catch Bugs Early:\r\n   - Test each part of your code separately to detect issues before they grow.\r\n2. Maintain Code Quality:\r\n   - Ensures that changes or updates to the code don’t break existing functionality.\r\n3. Saves Time:\r\n   - Automating tests lets you check your code quickly and repeatedly.\r\n\r\n\r\n\r\nHow Does `unittest` Work?\r\n\r\n# Key Steps to Perform Unit Testing:\r\n1. Import the `unittest` Module.\r\n2. Create a Test Case Class:\r\n   - Write test methods inside this class.\r\n   - Each method should start with `test_`.\r\n3. Run the Tests:\r\n   - Use `unittest.main()` to run all the test cases.\r\n\r\n\r\n\r\nSimple Example\r\nLet's test a function that adds two numbers:\r\n\r\n#Code to Test:\r\n\r\ndef add(a, b):\r\n    return a + b\r\n\r\n\r\n#Test Case:\r\n\r\nimport unittest\r\n\r\n# Define test case class\r\nclass TestMathFunctions(unittest.TestCase):\r\n    def test_add(self):\r\n        self.assertEqual(add(2, 3), 5)  # Check if 2 + 3 equals 5\r\n        self.assertEqual(add(-1, 1), 0)  # Check if -1 + 1 equals 0\r\n\r\n# Run the tests\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n\r\n\r\n\r\n\r\nOutput of the Test\r\nplaintext\r\n..\r\n-\r\nRan 2 tests in 0.001s\r\n\r\nOK\r\n\r\n\r\n- The dots (`..`) indicate that both tests passed.\r\n- If a test fails, it will show an error message.\r\n\r\n\r\n\r\nKey Features of `unittest`\r\n\r\n1. Assertions:\r\n   - Compare actual results with expected results.\r\n   - Common assertions include:\r\n     - `assertEqual(a, b)`: Check if `a == b`.\r\n     - `assertNotEqual(a, b)`: Check if `a != b`.\r\n     - `assertTrue(x)`: Check if `x` is `True`.\r\n     - `assertFalse(x)`: Check if `x` is `False`.\r\n     - `assertRaises(Error)`: Check if an error is raised.\r\n\r\n2. Setup and Teardown:\r\n   - Use `setUp()` and `tearDown()` methods to prepare the environment before and after each test.\r\n\r\n   def setUp(self):\r\n       self.data = [1, 2, 3]  # Create data for testing\r\n\r\n   def tearDown(self):\r\n       self.data = None  # Clean up after tests\r\n\r\n\r\n\r\n\r\nIndustry-Level Use Cases\r\n\r\n#1. Testing Mathematical Functions\r\nEnsure that utility functions (like addition, subtraction) work as expected.\r\n\r\ndef multiply(a, b):\r\n    return a * b\r\n\r\n\r\nTest Case:\r\n\r\nclass TestMath(unittest.TestCase):\r\n    def test_multiply(self):\r\n        self.assertEqual(multiply(3, 4), 12)\r\n        self.assertEqual(multiply(0, 5), 0)\r\n\r\n\r\n\r\n\r\n#2. Testing APIs\r\nValidate that API functions return correct responses.\r\n\r\ndef get_user(user_id):\r\n    if user_id == 1:\r\n        return {\"id\": 1, \"name\": \"Alice\"}\r\n    return None\r\n\r\n\r\nTest Case:\r\n\r\nclass TestAPI(unittest.TestCase):\r\n    def test_get_user(self):\r\n        self.assertEqual(get_user(1), {\"id\": 1, \"name\": \"Alice\"})\r\n        self.assertIsNone(get_user(99))  # Check if invalid user returns None\r\n\r\n\r\n\r\n\r\n#3. Testing Database Operations\r\nEnsure that database queries insert, update, or fetch data correctly.\r\n\r\ndef fetch_data():\r\n    return [\"record1\", \"record2\"]\r\n\r\n\r\nTest Case:\r\n\r\nclass TestDatabase(unittest.TestCase):\r\n    def test_fetch_data(self):\r\n        self.assertIn(\"record1\", fetch_data())  # Check if \"record1\" is in the result\r\n\r\n\r\n\r\n\r\n#4. Testing Classes and Objects\r\nCheck if methods in a class behave as expected.\r\n\r\nclass Calculator:\r\n    def add(self, a, b):\r\n        return a + b\r\n\r\n\r\nTest Case:\r\n\r\nclass TestCalculator(unittest.TestCase):\r\n    def test_add(self):\r\n        calc = Calculator()\r\n        self.assertEqual(calc.add(3, 7), 10)\r\n\r\n\r\n\r\n\r\n#5. Testing Edge Cases\r\nEnsure that your code handles unexpected inputs or scenarios gracefully.\r\n\r\nExample:\r\n- Test a function that divides numbers, ensuring it raises an error for division by zero.\r\n\r\ndef divide(a, b):\r\n    if b == 0:\r\n        raise ValueError(\"Cannot divide by zero\")\r\n    return a / b\r\n\r\n\r\nTest Case:\r\n\r\nclass TestDivision(unittest.TestCase):\r\n    def test_divide(self):\r\n        with self.assertRaises(ValueError):\r\n            divide(5, 0)\r\n\r\n\r\n\r\n\r\nAdvantages of Using `unittest`\r\n\r\n1. Built-In Library:\r\n   - No need to install third-party tools—it comes with Python.\r\n\r\n2. Automation:\r\n   - Run hundreds of tests automatically with one command.\r\n\r\n3. Error Isolation:\r\n   - Pinpoint exactly which part of the code is broken.\r\n\r\n4. Reusability:\r\n   - Write tests once, and reuse them whenever you update your code.\r\n\r\n\r\n\r\nLimitations of `unittest`\r\n\r\n1. Verbose for Small Tests:\r\n   - Writing test classes for very small functions can feel overkill.\r\n\r\n2. Not Suitable for Complex Scenarios Alone:\r\n   - For complex workflows (e.g., web app testing), use frameworks like pytest or Selenium alongside `unittest`.\r\n\r\n3. Limited for Asynchronous Code:\r\n   - Requires additional handling to test `async` functions.\r\n\r\n\r\n\r\nBest Practices for Unit Testing\r\n\r\n1. Test Only One Thing at a Time:\r\n   - Each test method should focus on one behavior.\r\n\r\n2. Use Meaningful Names:\r\n   - Name test methods descriptively (e.g., `test_add_positive_numbers`).\r\n\r\n3. Cover Edge Cases:\r\n   - Test invalid inputs, empty values, and boundary conditions.\r\n\r\n4. Run Tests Frequently:\r\n   - Regularly run your tests as you develop code to catch bugs early.\r\n\r\n\r\n\r\nWhen to Use `unittest`\r\n- Utility Functions: Test reusable functions like math operations or string manipulations.\r\n- API Functions: Validate responses, inputs, and error handling.\r\n- Database Operations: Ensure CRUD (Create, Read, Update, Delete) operations work correctly.\r\n- Class Methods: Check that methods behave as expected for different inputs.\r\n\r\n\r\n\r\nSummary\r\n- `unittest` is a Python library for testing small, individual parts of your code.\r\n- It ensures that changes or updates to your code don’t introduce new bugs.\r\n- Common use cases include testing mathematical operations, APIs, databases, and edge cases.\r\n\r\nLet me know if you’d like to explore `unittest` further or need help writing specific test cases! \uD83D\uDE0A
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes	(date 1733986883705)
@@ -1,7 +1,8 @@
 Unit Testing with `unittest` in Python
 
 # What is Unit Testing?
-- Unit testing is the process of testing small, individual pieces of your code (called "units") to ensure they work correctly.
+- Unit testing is the process of testing small, individual pieces of your code (called "units")
+  to ensure they work correctly.
 - In Python, the `unittest` module is a built-in library used to perform unit tests.
 
 
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/04_multithreading_terminologies
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/04_multithreading_terminologies b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/04_multithreading_terminologies
new file mode 100644
--- /dev/null	(date 1733989996069)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/04_multithreading_terminologies	(date 1733989996069)
@@ -0,0 +1,276 @@
+Basic Methods and Keywords in Python Multithreading
+
+Python provides several tools and methods in the `threading` module to handle multithreading. Below is a simple explanation of the commonly used methods and keywords, along with examples.
+
+
+
+1. `threading.Thread`
+- Creates a thread to execute a target function concurrently.
+
+Syntax:
+
+thread = threading.Thread(target=your_function, args=(arg1, arg2,))
+thread.start()
+
+
+Example:
+
+import threading
+
+def print_numbers():
+    for i in range(5):
+        print(f"Number: {i}")
+
+# Create and start a thread
+thread = threading.Thread(target=print_numbers)
+thread.start()
+thread.join()  # Wait for the thread to finish
+
+
+
+
+2. `start()`
+- Starts a thread's execution.
+
+Example:
+
+def task():
+    print("Thread started")
+
+thread = threading.Thread(target=task)
+thread.start()  # Starts the thread
+
+
+
+
+3. `join()`
+- Blocks the calling thread until the thread whose `join()` method is called is terminated.
+
+Example:
+
+def task():
+    for i in range(3):
+        print(f"Task {i}")
+
+thread = threading.Thread(target=task)
+thread.start()
+thread.join()  # Main program waits until the thread completes
+print("Thread completed")
+
+
+
+
+4. `daemon`
+- A daemon thread runs in the background and automatically exits when the main thread ends.
+
+Syntax:
+
+thread = threading.Thread(target=your_function)
+thread.daemon = True
+
+
+Example:
+
+def background_task():
+    while True:
+        print("Daemon thread running")
+        time.sleep(1)
+
+thread = threading.Thread(target=background_task, daemon=True)
+thread.start()
+time.sleep(3)  # Main thread runs for 3 seconds
+print("Main thread ends")
+
+
+
+
+5. `Lock`
+- Ensures that only one thread can access a shared resource at a time to prevent race conditions.
+
+Syntax:
+
+lock = threading.Lock()
+with lock:
+    # Critical section
+
+
+Example:
+
+import threading
+
+counter = 0
+lock = threading.Lock()
+
+def increment():
+    global counter
+    for _ in range(1000):
+        with lock:  # Ensures only one thread modifies `counter` at a time
+            counter += 1
+
+threads = [threading.Thread(target=increment) for _ in range(5)]
+for thread in threads:
+    thread.start()
+for thread in threads:
+    thread.join()
+
+print(f"Counter: {counter}")
+
+
+
+
+6. `Condition`
+- Used for advanced synchronization between threads (e.g., producer-consumer problem).
+
+Example:
+
+condition = threading.Condition()
+
+
+Example Usage:
+
+import threading
+import time
+
+condition = threading.Condition()
+shared_data = []
+
+def producer():
+    with condition:
+        for i in range(3):
+            shared_data.append(i)
+            print(f"Produced: {i}")
+            condition.notify()  # Signal the consumer
+            time.sleep(1)
+
+def consumer():
+    with condition:
+        while len(shared_data) < 3:
+            condition.wait()  # Wait for producer's signal
+        print(f"Consumed: {shared_data.pop(0)}")
+
+thread1 = threading.Thread(target=producer)
+thread2 = threading.Thread(target=consumer)
+
+thread1.start()
+thread2.start()
+thread1.join()
+thread2.join()
+
+
+
+
+7. `Queue`
+- A thread-safe queue for passing data between threads.
+
+Syntax:
+
+from queue import Queue
+
+queue = Queue()
+
+
+Example:
+
+from queue import Queue
+import threading
+
+def producer(queue):
+    for i in range(5):
+        print(f"Produced: {i}")
+        queue.put(i)
+
+def consumer(queue):
+    while not queue.empty():
+        item = queue.get()
+        print(f"Consumed: {item}")
+
+queue = Queue()
+thread1 = threading.Thread(target=producer, args=(queue,))
+thread2 = threading.Thread(target=consumer, args=(queue,))
+
+thread1.start()
+thread1.join()
+thread2.start()
+thread2.join()
+
+
+
+
+8. `ThreadPoolExecutor`
+- A high-level way to manage a pool of threads and distribute tasks among them.
+
+Syntax:
+
+from concurrent.futures import ThreadPoolExecutor
+
+with ThreadPoolExecutor(max_workers=3) as executor:
+    executor.submit(task, arg)
+
+
+Example:
+
+from concurrent.futures import ThreadPoolExecutor
+
+def square(n):
+    print(f"Square of {n}: {n2}")
+
+numbers = [1, 2, 3, 4]
+with ThreadPoolExecutor(max_workers=2) as executor:
+    executor.map(square, numbers)
+
+
+
+
+9. `Timer`
+- Executes a function after a delay.
+
+Syntax:
+
+threading.Timer(interval, function).start()
+
+
+Example:
+
+import threading
+
+def delayed_task():
+    print("Task executed after delay")
+
+threading.Timer(3, delayed_task).start()  # Executes after 3 seconds
+
+
+
+
+10. `active_count()`
+- Returns the number of currently active threads.
+
+Example:
+
+import threading
+
+def task():
+    time.sleep(1)
+
+thread1 = threading.Thread(target=task)
+thread2 = threading.Thread(target=task)
+
+thread1.start()
+thread2.start()
+
+print(f"Active threads: {threading.active_count()}")
+
+
+
+
+Summary of Common Methods and Keywords:
+| Keyword/Method       | Purpose                                                                 |
+| `threading.Thread`        | Create and manage threads.                                                 |
+| `start()`                 | Start thread execution.                                                   |
+| `join()`                  | Wait for thread completion.                                               |
+| `daemon`                 | Run background threads that terminate with the main thread.               |
+| `Lock`                    | Synchronize access to shared resources.                                   |
+| `Condition`               | Advanced thread synchronization.                                          |
+| `Queue`                   | Thread-safe way to pass data between threads.                             |
+| `ThreadPoolExecutor`      | Simplify managing multiple threads.                                       |
+| `Timer`                   | Execute tasks after a delay.                                              |
+| `active_count()`          | Get the number of active threads.                                         |
\ No newline at end of file
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>AsyncIO in Python\r\n\r\n( controlling the timing of operations by the use of pulses sent when the previous operation is completed\r\n rather than at regular intervals.)\r\n\r\n# What is AsyncIO?\r\n- AsyncIO is a Python library for writing asynchronous programs.\r\n- It allows you to run multiple tasks concurrently without waiting for one to finish before starting\r\n  another.\r\n- Instead of running tasks one after another (synchronously), AsyncIO lets tasks pause\r\n  (when waiting for something, like a network request) and allows other tasks to run in the meantime.\r\n\r\n\r\n\r\nKey Features of AsyncIO\r\n1. Non-Blocking:\r\n   - It doesn’t block the program while waiting (e.g., for a file to load or an API response).\r\n2. Concurrency:\r\n   - Lets multiple tasks happen \"at the same time\" in a single thread.\r\n\r\n\r\n\r\nHow AsyncIO Works\r\n- You write coroutines using `async def` functions.\r\n- Use `await` to pause a coroutine until the awaited task is completed.\r\n- An event loop manages all the coroutines and decides when to run them.\r\n\r\n\r\n\r\nBasic Example\r\n\r\n\r\nimport asyncio\r\n\r\nasync def fetch_data():\r\n    print(\"Start fetching data...\")\r\n    await asyncio.sleep(2)  # Simulate waiting for data\r\n    print(\"Data fetched!\")\r\n    return {\"data\": \"example\"}\r\n\r\nasync def main():\r\n    result = await fetch_data()\r\n    print(result)\r\n\r\nasyncio.run(main())\r\n\r\n\r\nOutput:\r\nplaintext\r\nStart fetching data...\r\n(2 seconds later)\r\nData fetched!\r\n{'data': 'example'}\r\n\r\n\r\nHere:\r\n1. `async def` creates a coroutine (`fetch_data`).\r\n2. `await asyncio.sleep(2)` pauses the coroutine for 2 seconds, allowing other tasks to run.\r\n3. `asyncio.run(main())` starts the event loop to run the coroutine.\r\n\r\n\r\n\r\nPurpose of AsyncIO\r\n- To handle tasks that involve waiting, like:\r\n  - Reading or writing files.\r\n  - Fetching data from the internet.\r\n  - Interacting with databases.\r\n\r\n\r\n\r\nIndustry-Level Use Cases\r\n\r\n#1. Handling Multiple API Calls Concurrently\r\n\r\nimport asyncio\r\n\r\nasync def fetch_api(api_name):\r\n    print(f\"Fetching {api_name}...\")\r\n    await asyncio.sleep(2)  # Simulate network delay\r\n    print(f\"Finished fetching {api_name}!\")\r\n\r\nasync def main():\r\n    await asyncio.gather(\r\n        fetch_api(\"API 1\"),\r\n        fetch_api(\"API 2\"),\r\n        fetch_api(\"API 3\")\r\n    )\r\n\r\nasyncio.run(main())\r\n\r\n\r\nUse Case: Collect data from multiple APIs at the same time (e.g., for dashboards or reports).\r\n\r\n\r\n\r\n#2. Web Scraping\r\n- Scrape multiple pages simultaneously for faster data collection.\r\n\r\n\r\nimport asyncio\r\n\r\nasync def scrape_page(page_number):\r\n    print(f\"Scraping page {page_number}...\")\r\n    await asyncio.sleep(1)  # Simulate page scraping\r\n    print(f\"Page {page_number} scraped!\")\r\n\r\nasync def main():\r\n    tasks = [scrape_page(i) for i in range(1, 6)]\r\n    await asyncio.gather(*tasks)\r\n\r\nasyncio.run(main())\r\n\r\n\r\nUse Case: Aggregate data quickly from multiple webpages.\r\n\r\n\r\n\r\n#3. Real-Time Chat Applications\r\n- Handle multiple users sending messages without blocking.\r\n\r\n\r\nasync def handle_user(user_id):\r\n    print(f\"User {user_id} connected\")\r\n    await asyncio.sleep(2)  # Simulate chat delay\r\n    print(f\"User {user_id} sent a message\")\r\n\r\nasync def chat_server():\r\n    await asyncio.gather(\r\n        handle_user(1),\r\n        handle_user(2),\r\n        handle_user(3)\r\n    )\r\n\r\nasyncio.run(chat_server())\r\n\r\n\r\nUse Case: Build scalable chat systems or collaborative tools.\r\n\r\n\r\n\r\n#4. Processing Large Datasets\r\n- Process chunks of a dataset concurrently.\r\n\r\n\r\nasync def process_chunk(chunk):\r\n    print(f\"Processing chunk {chunk}...\")\r\n    await asyncio.sleep(2)  # Simulate processing\r\n    print(f\"Chunk {chunk} processed!\")\r\n\r\nasync def main():\r\n    chunks = range(1, 6)\r\n    await asyncio.gather(*(process_chunk(chunk) for chunk in chunks))\r\n\r\nasyncio.run(main())\r\n\r\n\r\nUse Case: Batch processing for large-scale ETL (Extract, Transform, Load) pipelines.\r\n\r\n\r\n\r\n#5. Streaming Data\r\n- Handle live data from sensors or user inputs.\r\n\r\n\r\nasync def read_sensor(sensor_id):\r\n    for i in range(3):\r\n        print(f\"Sensor {sensor_id} reading: {i}\")\r\n        await asyncio.sleep(1)\r\n\r\nasync def main():\r\n    await asyncio.gather(\r\n        read_sensor(1),\r\n        read_sensor(2)\r\n    )\r\n\r\nasyncio.run(main())\r\n\r\n\r\nUse Case: IoT applications, monitoring systems.\r\n\r\n\r\n\r\nAdvantages of AsyncIO\r\n\r\n1. Concurrency Without Threads:\r\n   - Achieve concurrency without creating multiple threads or processes.\r\n   - More efficient for I/O-bound tasks.\r\n\r\n2. Faster Execution:\r\n   - Reduces total time for tasks that involve waiting (e.g., database queries or network requests).\r\n\r\n3. Scalability:\r\n   - Ideal for applications that need to handle thousands of tasks (e.g., web servers).\r\n\r\n\r\n\r\nLimitations of AsyncIO\r\n\r\n1. Not for CPU-Bound Tasks:\r\n   - AsyncIO doesn’t speed up tasks like image processing or machine learning. Use multi-threading or multi-processing for CPU-heavy work.\r\n\r\n2. Learning Curve:\r\n   - Requires understanding of `async`, `await`, and event loops.\r\n\r\n3. Third-Party Support:\r\n   - Some libraries (e.g., traditional database clients) may not support AsyncIO.\r\n\r\n\r\n\r\nBest Practices\r\n\r\n1. Use `asyncio.gather`:\r\n   - To run multiple coroutines concurrently.\r\n\r\n2. Combine Sync and Async Tasks:\r\n   - Offload heavy computations to threads using `asyncio.to_thread`.\r\n\r\n3. Error Handling:\r\n   - Wrap tasks in `try-except` blocks to handle errors gracefully.\r\n\r\n\r\n\r\nAlternatives to AsyncIO\r\n- Threads: For tasks requiring CPU-bound operations.\r\n- Processes: For true parallelism in multi-core systems.\r\n- Libraries:\r\n  - Trio: Simplifies asynchronous programming.\r\n  - Curio: A lightweight alternative to AsyncIO.\r\n\r\n\r\n\r\nWhen to Use AsyncIO\r\n1. When handling many I/O-bound tasks (e.g., API calls, file reads).\r\n2. For real-time systems like chat apps, sensors, or live data streams.\r\n3. When building scalable web servers or concurrent workflows.\r\n\r\n\r\n\r\nSummary\r\n- AsyncIO enables non-blocking, concurrent programming in Python.\r\n- It is ideal for tasks involving waiting (like file I/O, network requests, or databases).\r\n- Common use cases include web scraping, real-time systems, and large-scale data processing.
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes	(date 1733984636125)
@@ -1,6 +1,6 @@
 AsyncIO in Python
 
-( controlling the timing of operations by the use of pulses sent when the previous operation is completed
+(controlling the timing of operations by the use of pulses sent when the previous operation is completed
  rather than at regular intervals.)
 
 # What is AsyncIO?
@@ -197,7 +197,8 @@
 Limitations of AsyncIO
 
 1. Not for CPU-Bound Tasks:
-   - AsyncIO doesn’t speed up tasks like image processing or machine learning. Use multi-threading or multi-processing for CPU-heavy work.
+   - AsyncIO doesn’t speed up tasks like image processing or machine learning.
+   - Use multi-threading or multi-processing for CPU-heavy work.
 
 2. Learning Curve:
    - Requires understanding of `async`, `await`, and event loops.
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/demo_117.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/demo_117.py b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/demo_117.py
new file mode 100644
--- /dev/null	(date 1733989996065)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/demo_117.py	(date 1733989996065)
@@ -0,0 +1,7 @@
+def factorial(n):
+    if n == 0 or n == 1:
+        return 1
+    else:
+        return n * factorial(n - 1)
+
+print(factorial(5))  # Output: 120
\ No newline at end of file
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/02_pyarmour_comprehensive_commands
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/02_pyarmour_comprehensive_commands b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/02_pyarmour_comprehensive_commands
new file mode 100644
--- /dev/null	(date 1733991442055)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/02_pyarmour_comprehensive_commands	(date 1733991442055)
@@ -0,0 +1,216 @@
+Comprehensive List of PyArmor Commands for Code Obfuscation and Management
+
+
+1. Obfuscate a Single Script
+
+Command:
+
+pyarmor obfuscate your_script.py
+
+
+Example:
+
+pyarmor obfuscate demo_117.py
+
+
+- This generates an obfuscated version of `demo_117.py` in the `dist/` directory along with runtime files.
+
+
+
+2. Obfuscate and Output in a Specific Directory
+
+Command:
+
+pyarmor obfuscate --output ./output_directory your_script.py
+
+
+Example:
+
+pyarmor obfuscate --output ./secured_scripts demo_117.py
+
+
+- The obfuscated script and runtime files will be saved in `./secured_scripts`.
+
+
+
+3. Obfuscate Entire Directory
+
+Command:
+
+pyarmor pack --src ./source_directory --entry main_script.py
+
+
+Example:
+
+pyarmor pack --src ./my_project --entry app.py
+
+
+- This obfuscates all scripts in `./my_project` and treats `app.py` as the entry point.
+
+
+
+4. Obfuscate a Script Without Overwriting
+
+Command:
+
+pyarmor obfuscate --exact your_script.py
+
+
+Example:
+
+pyarmor obfuscate --exact demo_117.py
+
+
+- This ensures the original script is not overwritten.
+
+
+
+5. Rename the Obfuscated Script
+
+Command:
+
+pyarmor obfuscate --exact --output . your_script.py && ren your_script.py obfuscated_script.py
+
+
+Example:
+
+pyarmor obfuscate --exact --output . demo_117.py && ren demo_117.py secured_demo_117.py
+
+
+- This renames the obfuscated script for better clarity.
+
+
+
+6. Add Licensing
+
+To ensure that the obfuscated script can run only on authorized machines, use licensing.
+
+Command:
+
+pyarmor licenses --output ./licenses license_name
+
+
+Example:
+
+pyarmor licenses --output ./licenses customer_license
+
+
+- This generates a license file `customer_license.lic` in the `./licenses` directory.
+
+
+
+7. Bind Obfuscated Code to a Specific Device
+
+Command:
+
+pyarmor licenses --bind-data "HARDWARE" license_name
+
+
+Example:
+
+pyarmor licenses --bind-data "CPU=Intel,MAC=00:11:22:33:44:55" hardware_license
+
+
+- This binds the obfuscated script to devices with matching hardware configurations.
+
+
+
+8. Prepare Runtime
+
+To prepare the runtime environment for obfuscated scripts:
+
+Command:
+
+pyarmor runtime
+
+
+- This generates the necessary runtime files (e.g., `pytransform`) for obfuscated scripts.
+
+
+
+9. Deobfuscation (Not Directly Supported)
+
+PyArmor does not support deobfuscation for security reasons. However, you can manage and re-obfuscate the original code. Always keep a backup of your original scripts.
+
+
+
+10. Check PyArmor Version
+
+Command:
+
+pyarmor --version
+
+
+Example Output:
+plaintext
+PyArmor Version 7.7.1
+
+
+
+
+11. Pack Obfuscated Code as an Executable
+
+Use PyInstaller with PyArmor to pack obfuscated code into a standalone executable.
+
+Command:
+
+pyarmor pack --clean --entry main_script.py
+
+
+Example:
+
+pyarmor pack --clean --entry app.py
+
+
+
+
+12. Generate Licensing for End Users
+
+Command:
+
+pyarmor licenses --bind-data "KEY=VALUE" --output ./license_dir license_name
+
+
+Example:
+
+pyarmor licenses --bind-data "IP=192.168.1.100" --output ./licenses user_license
+
+
+
+
+13. Verify Licensing
+
+To check if the licensing setup works:
+Command:
+
+pyarmor test licenses/license.lic
+
+
+
+
+14. Obfuscate with Custom Options
+
+Command:
+
+pyarmor obfuscate --exact --exclude "test/*,docs/*" your_script.py
+
+
+Example:
+
+pyarmor obfuscate --exact --exclude "tests/*" demo_117.py
+
+
+- This excludes certain directories (`tests/`, `docs/`) from being obfuscated.
+
+
+
+15. Display Help for Commands
+
+Command:
+
+pyarmor --help
+
+
+Specific Command Help:
+
+pyarmor obfuscate --help
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n* `async`: This keyword is like a magic word that tells Python \"this function can pause and resume, allowing other things to happen while it waits.\"\r\n\r\n* `async def`:  This is how you define a special function called a \"coroutine.\" It's like giving instructions to one of your kitchen helpers. For example:\r\n\r\n   async def chop_vegetables():\r\n       # ... code to chop vegetables ...\r\n\r\n\r\n* `await`: This is how you tell your helper to \"pause and let others work while you wait for something.\" Imagine waiting for the oven to preheat:\r\n\r\n   async def bake_cake():\r\n       # ... wait for oven to preheat ...\r\n       await asyncio.sleep(10)  # Simulate preheating\r\n       # ... code to bake the cake ...\r\n\r\n\r\n* `async for`: This is like saying \"keep checking for new ingredients as they arrive.\" Imagine you have a helper bringing you vegetables one by one:\r\n\r\n   async for vegetable in get_vegetables():\r\n       # ... chop each vegetable as it arrives ...\r\n\r\n\r\n* `async with`: This is like saying \"make sure you clean up when you're done.\" Imagine automatically closing the oven when the cake is baked.\r\n\r\n* `asyncio.sleep()`: This tells your helper to take a break for a specific time. It's like setting a timer.\r\n\r\n* `asyncio.gather()`: This is like saying \"all helpers, start working together!\" It lets you run multiple coroutines concurrently.\r\n\r\n* `asyncio.run()`: This is like opening your kitchen and starting the cooking process. It starts the `asyncio` event loop, which is like the main coordinator in your kitchen.\r\n\r\nIn simpler terms:\r\n\r\n`asyncio` is a way to write programs that can do multiple things seemingly at the same time, even though they might be running on a single processor. It's like having a super-efficient chef who can juggle many tasks at once without getting overwhelmed.\r\n\r\nThis allows you to write programs that are more responsive and can handle tasks like network requests or user interactions more efficiently.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords	(date 1733984293961)
@@ -1,13 +1,16 @@
 
-* `async`: This keyword is like a magic word that tells Python "this function can pause and resume, allowing other things to happen while it waits."
+* `async`: This keyword is like a magic word that tells Python "this function can pause and resume,
+           allowing other things to happen while it waits."
 
-* `async def`:  This is how you define a special function called a "coroutine." It's like giving instructions to one of your kitchen helpers. For example:
+* `async def`:  This is how you define a special function called a "coroutine."
+                It's like giving instructions to one of your kitchen helpers. For example:
 
    async def chop_vegetables():
        # ... code to chop vegetables ...
 
 
-* `await`: This is how you tell your helper to "pause and let others work while you wait for something." Imagine waiting for the oven to preheat:
+* `await`: This is how you tell your helper to "pause and let others work while you wait for something."
+           Imagine waiting for the oven to preheat:
 
    async def bake_cake():
        # ... wait for oven to preheat ...
@@ -15,17 +18,23 @@
        # ... code to bake the cake ...
 
 
-* `async for`: This is like saying "keep checking for new ingredients as they arrive." Imagine you have a helper bringing you vegetables one by one:
+* `async for`:
+    This is like saying "keep checking for new ingredients as they arrive."
+    Imagine you have a helper bringing you vegetables one by one:
 
    async for vegetable in get_vegetables():
        # ... chop each vegetable as it arrives ...
 
 
-* `async with`: This is like saying "make sure you clean up when you're done." Imagine automatically closing the oven when the cake is baked.
+* `async with`:
+   This is like saying "make sure you clean up when you're done."
+   Imagine automatically closing the oven when the cake is baked.
 
-* `asyncio.sleep()`: This tells your helper to take a break for a specific time. It's like setting a timer.
+* `asyncio.sleep()`:
+   This tells your helper to take a break for a specific time. It's like setting a timer.
 
-* `asyncio.gather()`: This is like saying "all helpers, start working together!" It lets you run multiple coroutines concurrently.
+* `asyncio.gather()`:
+   This is like saying "all helpers, start working together!" It lets you run multiple coroutines concurrently.
 
 * `asyncio.run()`: This is like opening your kitchen and starting the cooking process. It starts the `asyncio` event loop, which is like the main coordinator in your kitchen.
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a03c1b01-0a7d-4ecb-9a42-a4bee4b47342\" name=\"Changes\" comment=\"added pandas project\">\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/04_unit_test_patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/README\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/external_module/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/external_module/external.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/PKG-INFO\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/SOURCES.txt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/dependency_links.txt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/top_level.txt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/main.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/nested.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/sub_utils.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/utils.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/r1/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/r1/standalone_module.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/setup.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/tests/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/tests/test_main.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/03_pdb_basic_5.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/04_pdb_itermediate.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/05_instructions_for_pdb\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/01_basic_5_unittest.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/02_intr_5_unittest.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/03_adv_5_unittest.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/04_unit_test_patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/playground.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/playground.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_accessing_website_html.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/02_accessing_html_bs_prettify.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/03_html_tags.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/04_html_attributes.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/05_extracting_navigable_strings.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/06_find_function.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/07_find_vs_findall.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/04_waiting_for_api.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/05_without_asyncIO.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/07_bg_without_async.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/api/demo_api.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/00_code_obfuscation_notes\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/01_code_obfuscation_examples.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/00_multi_threaded_programming\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_1_Python_Basics_Review_and_Advanced_Data_Structures/Module_2_Advanced_Data_Structures/03_Advanced_Dictionary_and_Set_Operations/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_1_Python_Basics_Review_and_Advanced_Data_Structures/Module_2_Advanced_Data_Structures/03_Advanced_Dictionary_and_Set_Operations/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/01_first_class_functions_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/01_first_class_functions_notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/02_Using_map_filter_and_reduce/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/02_Using_map_filter_and_reduce/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/03_Lambda_Expressions_and_Anonymous_Functions/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/03_Lambda_Expressions_and_Anonymous_Functions/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/04_Decorators/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/04_Decorators/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/01_generator_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/01_generator_notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/00_iterator_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/00_iterator_notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/02_playground.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/02_playground.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/00_pandas_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/00_pandas_notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.csv\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.json\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.parquet\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.pkl\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.txt\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.xlsx\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_by_category.png\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_by_region.png\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_trend.png\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Unit Test\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/.venv/Lib/site-packages/numpy/__config__.py\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"file://$PROJECT_DIR$/.venv/Lib/site-packages/numpy/doc/ufuncs.py\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2omxlenCGoByv0AXRDbdMA1HA4F\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python tests.Python tests for playground.TestAsyncFunction.executor\": \"Run\",\r\n    \"Python tests.Python tests for playground.test_addition.executor\": \"Run\",\r\n    \"Python tests.Python tests in playground.py.executor\": \"Run\",\r\n    \"Python.00_dictionary_vbasics.executor\": \"Run\",\r\n    \"Python.01_accessing_website_html.executor\": \"Run\",\r\n    \"Python.01_test_accessing_website_html.executor\": \"Run\",\r\n    \"Python.02_accessing_html_bs_prettify.executor\": \"Run\",\r\n    \"Python.02_creating_dataframes.executor\": \"Run\",\r\n    \"Python.02_deque_exercises.executor\": \"Run\",\r\n    \"Python.02_playground.executor\": \"Run\",\r\n    \"Python.03_html_tags.executor\": \"Run\",\r\n    \"Python.04_html_attributes.executor\": \"Run\",\r\n    \"Python.04_numpy_advanced.executor\": \"Run\",\r\n    \"Python.04_pdb_itermediate.executor\": \"Run\",\r\n    \"Python.04_waiting_for_api.executor\": \"Run\",\r\n    \"Python.05_extracting_navigable_strings.executor\": \"Run\",\r\n    \"Python.05_without_asyncIO.executor\": \"Run\",\r\n    \"Python.06_bg_Activities.executor\": \"Run\",\r\n    \"Python.06_find_function.executor\": \"Run\",\r\n    \"Python.07_bg_without_async.executor\": \"Run\",\r\n    \"Python.08_extract_keywords.executor\": \"Run\",\r\n    \"Python.demo_api.executor\": \"Run\",\r\n    \"Python.main (1).executor\": \"Run\",\r\n    \"Python.main (2).executor\": \"Run\",\r\n    \"Python.main (3).executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.main_direct_import.executor\": \"Run\",\r\n    \"Python.playground (1).executor\": \"Run\",\r\n    \"Python.playground (2).executor\": \"Run\",\r\n    \"Python.playground (3).executor\": \"Run\",\r\n    \"Python.playground (4).executor\": \"Run\",\r\n    \"Python.playground (5).executor\": \"Run\",\r\n    \"Python.playground.executor\": \"Debug\",\r\n    \"Python.s1.executor\": \"Run\",\r\n    \"Python.s2.executor\": \"Run\",\r\n    \"Python.transactions.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"C:/Users/Sandeep/PycharmProjects/python_advanced/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_3_Advanced_Libraries_Concurrency_and_Best_Practices\\Module_10_Testing_and_Debugging_in_Python\\03_Introduction_to_Pytest\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_3_Advanced_Libraries_Concurrency_and_Best_Practices\\Module_10_Testing_and_Debugging_in_Python\\02_Debugging_Techniques\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_3_Advanced_Libraries_Concurrency_and_Best_Practices\\Module_10_Testing_and_Debugging_in_Python\\01_Unit_Testing_with_unittest\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_3_Advanced_Libraries_Concurrency_and_Best_Practices\\Module_8_Working_with_Advanced_Libraries\\02_Web_Scraping_with_BeautifulSoup_and_Requests\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_3_Advanced_Libraries_Concurrency_and_Best_Practices\\Module_8_Working_with_Advanced_Libraries\\01_Data_Processing_with_Pandas\\pandas_practice\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_2_Object_Oriented_Programming_and_Functional_Programming\\Module_7_Generators_and_Iterators\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_2_Object_Oriented_Programming_and_Functional_Programming\\Module_5_Advanced_Object_Oriented_Programming\\02_Advanced_OOP_Concepts\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_1_Python_Basics_Review_and_Advanced_Data_Structures\\Module_2_Advanced_Data_Structures\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_1_Python_Basics_Review_and_Advanced_Data_Structures\\Module_2_Advanced_Data_Structures\\01_Collections_Module\" />\r\n      <recent name=\"C:\\Users\\Sandeep\\PycharmProjects\\python_advanced\\Day_1_Python_Basics_Review_and_Advanced_Data_Structures\\Module_1_Quick_Review_of_Python_Basics\\03_Modules_and_Packages\\project_root\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python tests.Python tests for playground.test_addition\">\r\n    <configuration name=\"04_pdb_itermediate\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python_advanced\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/04_pdb_itermediate.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"playground\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python_advanced\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for playground.TestAsyncFunction\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python_advanced\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;playground.TestAsyncFunction&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for playground.test_addition\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python_advanced\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;playground.test_addition&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in playground.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python_advanced\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python tests.Python tests for playground.test_addition\" />\r\n        <item itemvalue=\"Python.04_pdb_itermediate\" />\r\n        <item itemvalue=\"Python.playground\" />\r\n        <item itemvalue=\"Python tests.Python tests for playground.TestAsyncFunction\" />\r\n        <item itemvalue=\"Python tests.Python tests in playground.py\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5b207ade9991-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.17890.14\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a03c1b01-0a7d-4ecb-9a42-a4bee4b47342\" name=\"Changes\" comment=\"\" />\r\n      <created>1731488704388</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1731488704388</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added decorators\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732956882163</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732956882163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added pytest\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733064948870</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733064948870</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added basic documentation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733112252731</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733112252731</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added_half_day_1_projects\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733676662213</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733676662213</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"added file_ops project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733730885267</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733730885267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"added exception handling project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733731415681</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733731415681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added re exercises\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733731798754</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733731798754</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"updated project package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733732769000</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733732769000</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"added dictionary basic\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733742620811</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733742620811</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"added dictionary basic\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733742980745</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733742980745</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"added day_2 exercises and notes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733771685611</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733771685611</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"added oop basic\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733820806409</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733820806410</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"added pandas project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733891609210</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733891609210</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added decorators\" />\r\n    <MESSAGE value=\"added pytest\" />\r\n    <MESSAGE value=\"added basic documentation\" />\r\n    <MESSAGE value=\"added_half_day_1_projects\" />\r\n    <MESSAGE value=\"added file_ops project\" />\r\n    <MESSAGE value=\"added exception handling project\" />\r\n    <MESSAGE value=\"added re exercises\" />\r\n    <MESSAGE value=\"updated project package\" />\r\n    <MESSAGE value=\"added dictionary basic\" />\r\n    <MESSAGE value=\"added day_2 exercises and notes\" />\r\n    <MESSAGE value=\"added oop basic\" />\r\n    <MESSAGE value=\"added pandas project\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added pandas project\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/.idea/workspace.xml	(date 1733996433032)
@@ -4,82 +4,25 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a03c1b01-0a7d-4ecb-9a42-a4bee4b47342" name="Changes" comment="added pandas project">
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/04_unit_test_patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/README" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/external_module/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/external_module/external.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/PKG-INFO" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/SOURCES.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/dependency_links.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package.egg-info/top_level.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/main.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/nested.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/sub_package/sub_utils.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/project_package/utils.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/r1/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/r1/standalone_module.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/setup.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/tests/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/project_root/tests/test_main.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/03_pdb_basic_5.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/04_pdb_itermediate.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/05_instructions_for_pdb" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/01_basic_5_unittest.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/02_intr_5_unittest.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/03_adv_5_unittest.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/04_unit_test_patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest/playground.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/playground.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_accessing_website_html.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/02_accessing_html_bs_prettify.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/03_html_tags.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/04_html_attributes.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/05_extracting_navigable_strings.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/06_find_function.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/07_find_vs_findall.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/04_waiting_for_api.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/05_without_asyncIO.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/07_bg_without_async.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/api/demo_api.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/00_code_obfuscation_notes" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/01_code_obfuscation_examples.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/00_multi_threaded_programming" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="a03c1b01-0a7d-4ecb-9a42-a4bee4b47342" name="Changes" comment="added multi threading">
+      <change afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/playground.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/02_pyarmour_comprehensive_commands" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/demo_117.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/03_multi_threading_advanced.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/04_multithreading_terminologies" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_1_Python_Basics_Review_and_Advanced_Data_Structures/Module_2_Advanced_Data_Structures/03_Advanced_Dictionary_and_Set_Operations/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_1_Python_Basics_Review_and_Advanced_Data_Structures/Module_2_Advanced_Data_Structures/03_Advanced_Dictionary_and_Set_Operations/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/01_first_class_functions_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/01_first_class_functions_notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/01_First_Class_Functions_and_Closures/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/02_Using_map_filter_and_reduce/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/02_Using_map_filter_and_reduce/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/03_Lambda_Expressions_and_Anonymous_Functions/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/03_Lambda_Expressions_and_Anonymous_Functions/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/04_Decorators/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_6_Functional_Programming/04_Decorators/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/01_generator_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/01_generator_notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/01_Generators/playground.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/00_iterator_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/00_iterator_notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/02_playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_2_Object_Oriented_Programming_and_Functional_Programming/Module_7_Generators_and_Iterators/02_Custom_Iterators/02_playground.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/00_unit_testing_notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/00_pandas_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/00_pandas_notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.csv" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.json" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.parquet" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.pkl" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/data/data.xlsx" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_by_category.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_by_region.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/01_Data_Processing_with_Pandas/sales_analysis/reports/sales_trend.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest/playground.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/01_AsyncIO_notes" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords" beforeDir="false" afterPath="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/08_asyncIo_notes_keywords" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py" beforeDir="false" afterPath="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/02_multi_threding_intermediate.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/course_content" beforeDir="false" afterPath="$PROJECT_DIR$/course_content" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -133,6 +76,8 @@
     "Python.06_find_function.executor": "Run",
     "Python.07_bg_without_async.executor": "Run",
     "Python.08_extract_keywords.executor": "Run",
+    "Python.demo_117 (1).executor": "Run",
+    "Python.demo_117.executor": "Run",
     "Python.demo_api.executor": "Run",
     "Python.main (1).executor": "Run",
     "Python.main (2).executor": "Run",
@@ -144,7 +89,7 @@
     "Python.playground (3).executor": "Run",
     "Python.playground (4).executor": "Run",
     "Python.playground (5).executor": "Run",
-    "Python.playground.executor": "Debug",
+    "Python.playground.executor": "Run",
     "Python.s1.executor": "Run",
     "Python.s2.executor": "Run",
     "Python.transactions.executor": "Run",
@@ -170,8 +115,8 @@
       <recent name="C:\Users\Sandeep\PycharmProjects\python_advanced\Day_1_Python_Basics_Review_and_Advanced_Data_Structures\Module_1_Quick_Review_of_Python_Basics\03_Modules_and_Packages\project_root" />
     </key>
   </component>
-  <component name="RunManager" selected="Python tests.Python tests for playground.test_addition">
-    <configuration name="04_pdb_itermediate" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+  <component name="RunManager" selected="Python.playground (1)">
+    <configuration name="demo_117 (1)" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="python_advanced" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -180,11 +125,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/secure_demo117" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/04_pdb_itermediate.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/secure_demo117/demo_117.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -193,7 +138,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="playground" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="demo_117" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="python_advanced" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -202,11 +147,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/dist" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/dist/demo_117.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -215,34 +160,48 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for playground.TestAsyncFunction" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="playground (1)" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="python_advanced" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/01_Unit_Testing_with_unittest" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;playground.TestAsyncFunction&quot;" />
-      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/02_Debugging_Techniques/playground.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for playground.test_addition" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="playground" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="python_advanced" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_10_Testing_and_Debugging_in_Python/03_Introduction_to_Pytest" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;playground.test_addition&quot;" />
-      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
     <configuration name="Python tests in playground.py" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
@@ -262,11 +221,11 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Python tests.Python tests for playground.test_addition" />
-        <item itemvalue="Python.04_pdb_itermediate" />
-        <item itemvalue="Python.playground" />
-        <item itemvalue="Python tests.Python tests for playground.TestAsyncFunction" />
+        <item itemvalue="Python.playground (1)" />
         <item itemvalue="Python tests.Python tests in playground.py" />
+        <item itemvalue="Python.demo_117 (1)" />
+        <item itemvalue="Python.playground" />
+        <item itemvalue="Python.demo_117" />
       </list>
     </recent_temporary>
   </component>
@@ -390,7 +349,15 @@
       <option name="project" value="LOCAL" />
       <updated>1733891609210</updated>
     </task>
-    <option name="localTasksCounter" value="14" />
+    <task id="LOCAL-00014" summary="added multi threading">
+      <option name="closed" value="true" />
+      <created>1733976875150</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1733976875150</updated>
+    </task>
+    <option name="localTasksCounter" value="15" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -406,6 +373,7 @@
     <MESSAGE value="added day_2 exercises and notes" />
     <MESSAGE value="added oop basic" />
     <MESSAGE value="added pandas project" />
-    <option name="LAST_COMMIT_MESSAGE" value="added pandas project" />
+    <MESSAGE value="added multi threading" />
+    <option name="LAST_COMMIT_MESSAGE" value="added multi threading" />
   </component>
 </project>
\ No newline at end of file
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\r\nimport aiohttp\r\n\r\nasync def consume_events():\r\n    \"\"\"Consumes events from the API endpoint.\"\"\"\r\n    async with aiohttp.ClientSession() as session:\r\n        async with session.get('http://127.0.0.1:5000/random_number_stream') as response:\r\n            async for line in response.content:\r\n                line = line.decode('utf-8').strip()\r\n                if line.startswith('data:'):\r\n                    event_str = line[5:]\r\n                    print(f\"Received event: {event_str}\")\r\n\r\nasync def other_tasks():\r\n    \"\"\"Simulates other background tasks.\"\"\"\r\n    print(\"Doing other things...\")\r\n    for i in range(5):\r\n        print(f\"Iteration {i+1}\")\r\n        await asyncio.sleep(1)\r\nasync def other_tasks_2():\r\n    print(\"A new loop...\")\r\n    for i in range(5):\r\n        print(f\"Iteration from new loop {i+1}\")\r\n        await asyncio.sleep(2)\r\nasync def main():\r\n    \"\"\"Starts event consumption and other tasks concurrently.\"\"\"\r\n    await asyncio.gather(consume_events(), other_tasks(), other_tasks_2())\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_9_Asynchronous_Programming/01_AsyncIO_Await/06_bg_Activities.py	(date 1733983102074)
@@ -15,12 +15,13 @@
     """Simulates other background tasks."""
     print("Doing other things...")
     for i in range(5):
-        print(f"Iteration {i+1}")
+        print(f"FIRST TASK : OPERATION {i+1}")
         await asyncio.sleep(1)
+
 async def other_tasks_2():
     print("A new loop...")
     for i in range(5):
-        print(f"Iteration from new loop {i+1}")
+        print(f"SECOND TASK : OPERATION {i+1}")
         await asyncio.sleep(2)
 async def main():
     """Starts event consumption and other tasks concurrently."""
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\ndef fetch_html(url):\r\n    \"\"\"\r\n    Fetches and parses the HTML content of a given website URL.\r\n\r\n    Parameters:\r\n        url (str): The URL of the website to fetch.\r\n\r\n    Returns:\r\n        str: The parsed HTML content of the website, or an error message if the request fails.\r\n    \"\"\"\r\n    try:\r\n        response = requests.get(url)\r\n        if response.status_code == 200:\r\n            soup = BeautifulSoup(response.text, 'html.parser')\r\n            return soup.prettify()\r\n        else:\r\n            return f\"Failed to fetch HTML content. Status code: {response.status_code}\"\r\n    except requests.exceptions.RequestException as e:\r\n        return f\"An error occurred: {e}\"\r\n\r\n# Example usage\r\nurl = \"https://www.amazon.in/hz/mobile/mission?p=s3rLV1%2FLkbf%2FKbsb8K7ZnKlJUPsXQsjeapOPFa552hcVKGl%2F6nD7p1C%2B58iysnuugeXpgsyJH0HC8%2BCRMTRRFjifnUnzZNSHbCq9UfLgnONqEYJcV2xwR1R8XaChO%2BJih4nsExouln87dwxr%2Bo1pDZgezSoBEiePTj7skohzhR%2Bhf%2B7dteHAEYws4younzUUWoHYOXXx47q9D%2BPPlG2XQlrIn0WJQCB4KQB4l57AMpRv9IDEyOI1b%2BPHDPsTryi%2BxVdr1qzqcXLb5hYSX%2B%2F1MV4d4XmCjwrdBqcJFhggEO3SYCZFXRNvcQ69R%2FYsaqEu3LvvFyQfloBqrhPNyRE4zgCPWkrnMQvhTs%2FzUKVhVggw%2BW1rB616q8ssSRAbtqsRXCcC1GIh5fCUrK7jTYKNAClaQVwasgFJiB%2BWqz3econmxqDhpd6%2BWw%3D%3D&ref_=nb_sb_ss_di_ci_mcx_mi_ci-mcx-ksf-of-nv1_0&crid=66Y858WZBWMY\"\r\nresponse = requests.get(url)\r\nsoup = BeautifulSoup(response.text, 'html.parser')\r\n\r\n# Define the keywords to search for\r\nkeywords = ['1 Ton', '5 Star', 'copper', 'inverter', '2024']\r\n\r\n# Extract strings containing the keywords\r\nmatches = []\r\nfor string in soup.stripped_strings:\r\n    if all(keyword.lower() in string.lower() for keyword in keywords):\r\n        matches.append(string)\r\n\r\n# Display the extracted matches\r\nfor match in matches:\r\n    print(match)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/08_extract_keywords.py	(date 1733979171069)
@@ -32,7 +32,7 @@
 # Extract strings containing the keywords
 matches = []
 for string in soup.stripped_strings:
-    if all(keyword.lower() in string.lower() for keyword in keywords):
+    if any(keyword.lower() in string.lower() for keyword in keywords):
         matches.append(string)
 
 # Display the extracted matches
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py
new file mode 100644
--- /dev/null	(date 1733990710553)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_12_Code Obfuscation/playground.py	(date 1733990710553)
@@ -0,0 +1,3 @@
+from secure_demo117.demo_117 import factorial
+
+print(factorial(5))
Index: Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\n\r\ndef fetch_html(url):\r\n    \"\"\"\r\n    Fetches the HTML content of a given website URL.\r\n\r\n    Parameters:\r\n        url (str): The URL of the website to fetch.\r\n\r\n    Returns:\r\n        str: The HTML content of the website, or an error message if the request fails.\r\n    \"\"\"\r\n    try:\r\n\r\n        headers = {\r\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\r\n        }\r\n\r\n        response = requests.get(url, headers=headers)\r\n\r\n        if response.status_code == 200:\r\n            return response.text\r\n        else:\r\n            return f\"Failed to fetch HTML content. Status code: {response.status_code}\"\r\n    except requests.exceptions.RequestException as e:\r\n        return f\"An error occurred: {e}\"\r\n\r\n# Example usage\r\nif __name__ == \"__main__\":\r\n    url = \"https://www.flipkart.com/search?q=air+conditioners&sid=j9e%2Cabm%2Cc54&as=on&as-show=on&otracker=AS_QueryStore_OrganicAutoSuggest_1_12_na_na_na&otracker1=AS_QueryStore_OrganicAutoSuggest_1_12_na_na_na&as-pos=1&as-type=RECENT&suggestionId=air+conditioners%7CAir+Conditioners&requestId=8a94da9b-17be-45b3-9f54-bd8af4784169&as-backfill=on\"\r\n    html_content = fetch_html(url)\r\n    print(html_content)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py
--- a/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_3_Advanced_Libraries_Concurrency_and_Best_Practices/Module_8_Working_with_Advanced_Libraries/02_Web_Scraping_with_BeautifulSoup_and_Requests/01_test_accessing_website_html.py	(date 1733978229591)
@@ -17,7 +17,6 @@
         }
 
         response = requests.get(url, headers=headers)
-
         if response.status_code == 200:
             return response.text
         else:
Index: Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Multithreading Exercises in Python\r\n# These exercises will help you understand and implement multithreading.\r\n\r\nimport threading\r\nimport time\r\nfrom queue import Queue\r\n\r\n# Exercise 1: Basic Threading\r\n# Problem: Create two threads, one to print even numbers and another to print odd numbers up to 10.\r\n# Goal: Understand how to start and join threads.\r\ndef print_even():\r\n    for i in range(0, 11, 2):\r\n        print(f\"Even: {i}\")\r\n        time.sleep(0.5)\r\n\r\ndef print_odd():\r\n    for i in range(1, 11, 2):\r\n        print(f\"Odd: {i}\")\r\n        time.sleep(0.5)\r\n\r\n# Starting threads\r\nthread1 = threading.Thread(target=print_even)\r\nthread2 = threading.Thread(target=print_odd)\r\n\r\nthread1.start()\r\nthread2.start()\r\n\r\nthread1.join()\r\nthread2.join()\r\n\r\n# Exercise 2: Using Thread Locks\r\n# Problem: Write a program where multiple threads update a shared counter, ensuring thread safety.\r\n# Goal: Learn to use threading locks.\r\ncounter = 0\r\ncounter_lock = threading.Lock()\r\n\r\ndef increment_counter():\r\n    global counter\r\n    for _ in range(10):\r\n        with counter_lock:\r\n            counter += 1\r\n            print(f\"Counter: {counter}\")\r\n        time.sleep(0.1)\r\n\r\nthreads = [threading.Thread(target=increment_counter) for _ in range(5)]\r\nfor thread in threads:\r\n    thread.start()\r\nfor thread in threads:\r\n    thread.join()\r\n\r\n# Exercise 3: Producer-Consumer Problem\r\n# Problem: Implement a producer-consumer model using a queue.\r\n# Goal: Understand thread communication using queues.\r\ndef producer(queue):\r\n    for i in range(5):\r\n        print(f\"Produced: {i}\")\r\n        queue.put(i)\r\n        time.sleep(1)\r\n\r\ndef consumer(queue):\r\n    while True:\r\n        item = queue.get()\r\n        if item is None:\r\n            break\r\n        print(f\"Consumed: {item}\")\r\n        time.sleep(2)\r\n\r\nqueue = Queue()\r\nproducer_thread = threading.Thread(target=producer, args=(queue,))\r\nconsumer_thread = threading.Thread(target=consumer, args=(queue,))\r\n\r\nproducer_thread.start()\r\nconsumer_thread.start()\r\n\r\nproducer_thread.join()\r\nqueue.put(None)  # Signal the consumer to exit\r\nconsumer_thread.join()\r\n\r\n# Exercise 4: Multithreading with a ThreadPoolExecutor\r\n# Problem: Use a ThreadPoolExecutor to compute squares of numbers in parallel.\r\n# Goal: Explore high-level multithreading with ThreadPoolExecutor.\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\ndef compute_square(n):\r\n    print(f\"Square of {n}: {n**2}\")\r\n    time.sleep(0.5)\r\n\r\nnumbers = [1, 2, 3, 4, 5]\r\nwith ThreadPoolExecutor(max_workers=3) as executor:\r\n    executor.map(compute_square, numbers)\r\n\r\n# Exercise 5: Daemon Threads\r\n# Problem: Create a daemon thread that prints a message every second, while the main thread ends after 5 seconds.\r\n# Goal: Understand the concept of daemon threads.\r\ndef background_task():\r\n    while True:\r\n        print(\"Daemon thread running...\")\r\n        time.sleep(1)\r\n\r\ndaemon_thread = threading.Thread(target=background_task, daemon=True)\r\ndaemon_thread.start()\r\n\r\ntime.sleep(5)\r\nprint(\"Main thread ends.\")\r\n\r\n# Summary: These exercises cover creating threads, using locks for thread safety, thread communication with queues,\r\n# high-level threading with ThreadPoolExecutor, and daemon threads.
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py
--- a/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py	(revision 59cb17cdf8fab3728151becab159259ef6d9fb5e)
+++ b/Day_4_Code Obfuscation_Multithreaded_programming/Module_13_Multithreaded Programming/01_multi_threading_basic.py	(date 1733989996075)
@@ -29,7 +29,8 @@
 thread2.join()
 
 # Exercise 2: Using Thread Locks
-# Problem: Write a program where multiple threads update a shared counter, ensuring thread safety.
+# Problem: Write a program where multiple threads update a shared counter, ensuring thread
+# safety.
 # Goal: Learn to use threading locks.
 counter = 0
 counter_lock = threading.Lock()
